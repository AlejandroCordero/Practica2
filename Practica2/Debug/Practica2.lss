
Practica2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  00000962  000009f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000962  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800210  00800210  00000a06  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e92  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cdd  00000000  00000000  0000194a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043d  00000000  00000000  00002627  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00002a64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e4  00000000  00000000  00002b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b3  00000000  00000000  000030fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000032af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	2f c1       	rjmp	.+606    	; 0x2d4 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e6       	ldi	r30, 0x62	; 98
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 31       	cpi	r26, 0x10	; 16
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e1       	ldi	r26, 0x10	; 16
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 31       	cpi	r26, 0x18	; 24
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	35 d0       	rcall	.+106    	; 0x18a <main>
 120:	1e c4       	rjmp	.+2108   	; 0x95e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <ADC_read>:
// Global variables


unsigned int ADC_read()
{
	ADMUX=0x40;													 // Channel A0 selected
 124:	80 e4       	ldi	r24, 0x40	; 64
 126:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA|=(1<<ADSC);											 // Start conversion
 12a:	ea e7       	ldi	r30, 0x7A	; 122
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	80 64       	ori	r24, 0x40	; 64
 132:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));								 // Wait for ADIF conversion complete return
 134:	80 81       	ld	r24, Z
 136:	84 ff       	sbrs	r24, 4
 138:	fd cf       	rjmp	.-6      	; 0x134 <ADC_read+0x10>
	ADCSRA|=(1<<ADIF);											 // Clear ADIF when conversion complete by writing 1
 13a:	ea e7       	ldi	r30, 0x7A	; 122
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	80 61       	ori	r24, 0x10	; 16
 142:	80 83       	st	Z, r24
	return (ADC);												 // Return calculated ADC value
 144:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
 148:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
}														
 14c:	08 95       	ret

0000014e <ADC_Init>:
// Source: https://circuitdigest.com/microcontroller-projects/how-to-use-adc-in-avr-microcontroller-atmega16
 
void ADC_Init() {
	ADMUX=(1<<REFS1);											 // Selecting internal reference voltage (1.1V)
 14e:	80 e8       	ldi	r24, 0x80	; 128
 150:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA=(1<<ADIE)|(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); // Enable ADC also set Prescaler as 128 and AD interruptions are enabled.
 154:	8f e8       	ldi	r24, 0x8F	; 143
 156:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
 15a:	08 95       	ret

0000015c <Init_System>:
}

void Init_System() {
	/*------1 for outputs and 0 for inputs-----*/

	DDRC=0b11111111;											 // 7 segments of display are setup as output pins
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	87 b9       	out	0x07, r24	; 7
	DDRA=0b00000111;											 // 3 digital GND are setup as outputs to multiplex which digit is shown in display
 160:	87 e0       	ldi	r24, 0x07	; 7
 162:	81 b9       	out	0x01, r24	; 1
	DDRF=0b11111110;											 // Potenciometer analog input	
 164:	8e ef       	ldi	r24, 0xFE	; 254
 166:	80 bb       	out	0x10, r24	; 16
	
	ADC_Init();													// ADC pins are initialized
 168:	f2 df       	rcall	.-28     	; 0x14e <ADC_Init>
	pot = malloc(sizeof(*pot)*nDigit); 
 16a:	8c e0       	ldi	r24, 0x0C	; 12
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	d6 d2       	rcall	.+1452   	; 0x71c <malloc>
 170:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <__data_end+0x1>
 174:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <__data_end>
	poti = malloc(sizeof(*poti)*nDigit);					    // Source: @YamikaDesu who gave me the idea
 178:	83 e0       	ldi	r24, 0x03	; 3
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	cf d2       	rcall	.+1438   	; 0x71c <malloc>
 17e:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <poti+0x1>
 182:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <poti>
	sei();														// Enables interruptions
 186:	78 94       	sei
 188:	08 95       	ret

0000018a <main>:

int main(void)
{
	int j,k;
	uint8_t* pDisplayCC=&DisplayCC;								// pDisplayCC is initialized to point to the address of DisplayCC
	Init_System();
 18a:	e8 df       	rcall	.-48     	; 0x15c <Init_System>
	pot[0]=(ADC_read()*5.0)/1024;								// First float value is read from ADC input
 18c:	c0 91 10 02 	lds	r28, 0x0210	; 0x800210 <__data_end>
 190:	d0 91 11 02 	lds	r29, 0x0211	; 0x800211 <__data_end+0x1>
 194:	c7 df       	rcall	.-114    	; 0x124 <ADC_read>
 196:	bc 01       	movw	r22, r24
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	87 d1       	rcall	.+782    	; 0x4ac <__floatunsisf>
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	40 ea       	ldi	r20, 0xA0	; 160
 1a4:	50 e4       	ldi	r21, 0x40	; 64
 1a6:	10 d2       	rcall	.+1056   	; 0x5c8 <__mulsf3>
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	40 e8       	ldi	r20, 0x80	; 128
 1ae:	5a e3       	ldi	r21, 0x3A	; 58
 1b0:	0b d2       	rcall	.+1046   	; 0x5c8 <__mulsf3>
 1b2:	68 83       	st	Y, r22
 1b4:	79 83       	std	Y+1, r23	; 0x01
 1b6:	8a 83       	std	Y+2, r24	; 0x02
 1b8:	9b 83       	std	Y+3, r25	; 0x03
	poti[0]=trunc(pot[0]);									    // First float value is truncated to integer
 1ba:	c0 91 12 02 	lds	r28, 0x0212	; 0x800212 <poti>
 1be:	d0 91 13 02 	lds	r29, 0x0213	; 0x800213 <poti+0x1>
 1c2:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <__data_end>
 1c6:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <__data_end+0x1>
 1ca:	60 81       	ld	r22, Z
 1cc:	71 81       	ldd	r23, Z+1	; 0x01
 1ce:	82 81       	ldd	r24, Z+2	; 0x02
 1d0:	93 81       	ldd	r25, Z+3	; 0x03
 1d2:	5d d2       	rcall	.+1210   	; 0x68e <trunc>
 1d4:	3f d1       	rcall	.+638    	; 0x454 <__fixunssfsi>
 1d6:	68 83       	st	Y, r22
					PORTA=0xFB;
				}
				else
				{												// Rest of digits
					PORTC=*(pDisplayCC+poti[j]) & 0x7F;
					PORTA=(0xFB >> j) | 0xF8;
 1d8:	0f 2e       	mov	r0, r31
 1da:	fb ef       	ldi	r31, 0xFB	; 251
 1dc:	4f 2e       	mov	r4, r31
 1de:	51 2c       	mov	r5, r1
 1e0:	f0 2d       	mov	r31, r0
	poti = malloc(sizeof(*poti)*nDigit);					    // Source: @YamikaDesu who gave me the idea
	sei();														// Enables interruptions
}

int main(void)
{
 1e2:	cc 24       	eor	r12, r12
 1e4:	c3 94       	inc	r12
 1e6:	d1 2c       	mov	r13, r1
 1e8:	61 2c       	mov	r6, r1
 1ea:	71 2c       	mov	r7, r1
 1ec:	6d c0       	rjmp	.+218    	; 0x2c8 <main+0x13e>
		
			for (j=0;j<nDigit;j++)
			{
				for (k=1;k<nDigit;k++)							// The following algorithm initializes all values to be shown on display converting each decimal in integer
				{
					pot[k]=10*(pot[k-1]-trunc(pot[k-1]));
 1ee:	c0 91 10 02 	lds	r28, 0x0210	; 0x800210 <__data_end>
 1f2:	d0 91 11 02 	lds	r29, 0x0211	; 0x800211 <__data_end+0x1>
 1f6:	7c 01       	movw	r14, r24
 1f8:	24 e0       	ldi	r18, 0x04	; 4
 1fa:	e2 0e       	add	r14, r18
 1fc:	f1 1c       	adc	r15, r1
 1fe:	fe 01       	movw	r30, r28
 200:	e8 0f       	add	r30, r24
 202:	f9 1f       	adc	r31, r25
 204:	80 80       	ld	r8, Z
 206:	91 80       	ldd	r9, Z+1	; 0x01
 208:	a2 80       	ldd	r10, Z+2	; 0x02
 20a:	b3 80       	ldd	r11, Z+3	; 0x03
 20c:	c5 01       	movw	r24, r10
 20e:	b4 01       	movw	r22, r8
 210:	3e d2       	rcall	.+1148   	; 0x68e <trunc>
 212:	9b 01       	movw	r18, r22
 214:	ac 01       	movw	r20, r24
 216:	ce 0d       	add	r28, r14
 218:	df 1d       	adc	r29, r15
 21a:	c5 01       	movw	r24, r10
 21c:	b4 01       	movw	r22, r8
 21e:	b5 d0       	rcall	.+362    	; 0x38a <__subsf3>
 220:	20 e0       	ldi	r18, 0x00	; 0
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	40 e2       	ldi	r20, 0x20	; 32
 226:	51 e4       	ldi	r21, 0x41	; 65
 228:	cf d1       	rcall	.+926    	; 0x5c8 <__mulsf3>
 22a:	68 83       	st	Y, r22
 22c:	79 83       	std	Y+1, r23	; 0x01
 22e:	8a 83       	std	Y+2, r24	; 0x02
 230:	9b 83       	std	Y+3, r25	; 0x03
					poti[k]=trunc(pot[k]);
 232:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <__data_end>
 236:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <__data_end+0x1>
 23a:	ee 0d       	add	r30, r14
 23c:	ff 1d       	adc	r31, r15
 23e:	60 81       	ld	r22, Z
 240:	71 81       	ldd	r23, Z+1	; 0x01
 242:	82 81       	ldd	r24, Z+2	; 0x02
 244:	93 81       	ldd	r25, Z+3	; 0x03
 246:	23 d2       	rcall	.+1094   	; 0x68e <trunc>
 248:	c0 91 12 02 	lds	r28, 0x0212	; 0x800212 <poti>
 24c:	d0 91 13 02 	lds	r29, 0x0213	; 0x800213 <poti+0x1>
 250:	c0 0f       	add	r28, r16
 252:	d1 1f       	adc	r29, r17
 254:	ff d0       	rcall	.+510    	; 0x454 <__fixunssfsi>
 256:	68 83       	st	Y, r22
	poti[0]=trunc(pot[0]);									    // First float value is truncated to integer
	while(1) {
		
			for (j=0;j<nDigit;j++)
			{
				for (k=1;k<nDigit;k++)							// The following algorithm initializes all values to be shown on display converting each decimal in integer
 258:	0f 5f       	subi	r16, 0xFF	; 255
 25a:	1f 4f       	sbci	r17, 0xFF	; 255
 25c:	c7 01       	movw	r24, r14
 25e:	03 30       	cpi	r16, 0x03	; 3
 260:	11 05       	cpc	r17, r1
 262:	09 f0       	breq	.+2      	; 0x266 <main+0xdc>
 264:	c4 cf       	rjmp	.-120    	; 0x1ee <main+0x64>
				{
					pot[k]=10*(pot[k-1]-trunc(pot[k-1]));
					poti[k]=trunc(pot[k]);
				}
				
				if (j==0)										// First digit
 266:	21 14       	cp	r2, r1
 268:	31 04       	cpc	r3, r1
 26a:	71 f4       	brne	.+28     	; 0x288 <main+0xfe>
				{
					PORTC=*(pDisplayCC+poti[j]) | 0x80;
 26c:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <poti>
 270:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <poti+0x1>
 274:	e0 81       	ld	r30, Z
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	ea 5f       	subi	r30, 0xFA	; 250
 27a:	fd 4f       	sbci	r31, 0xFD	; 253
 27c:	80 81       	ld	r24, Z
 27e:	80 68       	ori	r24, 0x80	; 128
 280:	88 b9       	out	0x08, r24	; 8
					PORTA=0xFB;
 282:	8b ef       	ldi	r24, 0xFB	; 251
 284:	82 b9       	out	0x02, r24	; 2
 286:	1a c0       	rjmp	.+52     	; 0x2bc <main+0x132>
				}
				else
				{												// Rest of digits
					PORTC=*(pDisplayCC+poti[j]) & 0x7F;
 288:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <poti>
 28c:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <poti+0x1>
 290:	e6 0d       	add	r30, r6
 292:	f7 1d       	adc	r31, r7
 294:	e0 81       	ld	r30, Z
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	ea 5f       	subi	r30, 0xFA	; 250
 29a:	fd 4f       	sbci	r31, 0xFD	; 253
 29c:	80 81       	ld	r24, Z
 29e:	8f 77       	andi	r24, 0x7F	; 127
 2a0:	88 b9       	out	0x08, r24	; 8
					PORTA=(0xFB >> j) | 0xF8;
 2a2:	c2 01       	movw	r24, r4
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <main+0x120>
 2a6:	95 95       	asr	r25
 2a8:	87 95       	ror	r24
 2aa:	2a 94       	dec	r2
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <main+0x11c>
 2ae:	88 6f       	ori	r24, 0xF8	; 248
 2b0:	82 b9       	out	0x02, r24	; 2
	Init_System();
	pot[0]=(ADC_read()*5.0)/1024;								// First float value is read from ADC input
	poti[0]=trunc(pot[0]);									    // First float value is truncated to integer
	while(1) {
		
			for (j=0;j<nDigit;j++)
 2b2:	23 e0       	ldi	r18, 0x03	; 3
 2b4:	c2 16       	cp	r12, r18
 2b6:	d1 04       	cpc	r13, r1
 2b8:	0c f0       	brlt	.+2      	; 0x2bc <main+0x132>
 2ba:	93 cf       	rjmp	.-218    	; 0x1e2 <main+0x58>
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
 2be:	68 1a       	sub	r6, r24
 2c0:	78 0a       	sbc	r7, r24
 2c2:	2f ef       	ldi	r18, 0xFF	; 255
 2c4:	c2 1a       	sub	r12, r18
 2c6:	d2 0a       	sbc	r13, r18
 2c8:	13 01       	movw	r2, r6
	poti = malloc(sizeof(*poti)*nDigit);					    // Source: @YamikaDesu who gave me the idea
	sei();														// Enables interruptions
}

int main(void)
{
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	01 e0       	ldi	r16, 0x01	; 1
 2d0:	10 e0       	ldi	r17, 0x00	; 0
 2d2:	8d cf       	rjmp	.-230    	; 0x1ee <main+0x64>

000002d4 <__vector_29>:
	
	free(pot);													// If somehow while-loop is forced to break, the program stops memory is cleared
	free(poti);	
}																// Program being interrupted by ISR

ISR(ADC_vect) {
 2d4:	1f 92       	push	r1
 2d6:	0f 92       	push	r0
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	0f 92       	push	r0
 2dc:	11 24       	eor	r1, r1
 2de:	0b b6       	in	r0, 0x3b	; 59
 2e0:	0f 92       	push	r0
 2e2:	2f 93       	push	r18
 2e4:	3f 93       	push	r19
 2e6:	4f 93       	push	r20
 2e8:	5f 93       	push	r21
 2ea:	6f 93       	push	r22
 2ec:	7f 93       	push	r23
 2ee:	8f 93       	push	r24
 2f0:	9f 93       	push	r25
 2f2:	af 93       	push	r26
 2f4:	bf 93       	push	r27
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	ef 93       	push	r30
 2fc:	ff 93       	push	r31
	pot[0]=ADC_read()*5.0/1024;									// First float value is read from ADC input
 2fe:	c0 91 10 02 	lds	r28, 0x0210	; 0x800210 <__data_end>
 302:	d0 91 11 02 	lds	r29, 0x0211	; 0x800211 <__data_end+0x1>
 306:	0e df       	rcall	.-484    	; 0x124 <ADC_read>
 308:	bc 01       	movw	r22, r24
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	ce d0       	rcall	.+412    	; 0x4ac <__floatunsisf>
 310:	20 e0       	ldi	r18, 0x00	; 0
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	40 ea       	ldi	r20, 0xA0	; 160
 316:	50 e4       	ldi	r21, 0x40	; 64
 318:	57 d1       	rcall	.+686    	; 0x5c8 <__mulsf3>
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	40 e8       	ldi	r20, 0x80	; 128
 320:	5a e3       	ldi	r21, 0x3A	; 58
 322:	52 d1       	rcall	.+676    	; 0x5c8 <__mulsf3>
 324:	68 83       	st	Y, r22
 326:	79 83       	std	Y+1, r23	; 0x01
 328:	8a 83       	std	Y+2, r24	; 0x02
 32a:	9b 83       	std	Y+3, r25	; 0x03
	poti[0]=trunc(pot[0]);										// First float value is truncated to integer
 32c:	c0 91 12 02 	lds	r28, 0x0212	; 0x800212 <poti>
 330:	d0 91 13 02 	lds	r29, 0x0213	; 0x800213 <poti+0x1>
 334:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <__data_end>
 338:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <__data_end+0x1>
 33c:	60 81       	ld	r22, Z
 33e:	71 81       	ldd	r23, Z+1	; 0x01
 340:	82 81       	ldd	r24, Z+2	; 0x02
 342:	93 81       	ldd	r25, Z+3	; 0x03
 344:	a4 d1       	rcall	.+840    	; 0x68e <trunc>
 346:	86 d0       	rcall	.+268    	; 0x454 <__fixunssfsi>
 348:	68 83       	st	Y, r22
	ADCSRA |= (1<<ADSC);										// ADSC is set to 1 to start next conversion
 34a:	ea e7       	ldi	r30, 0x7A	; 122
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	80 64       	ori	r24, 0x40	; 64
 352:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 354:	87 ec       	ldi	r24, 0xC7	; 199
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <__vector_29+0x84>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <__vector_29+0x8a>
 35e:	00 00       	nop
	_delay_us(50);
 360:	ff 91       	pop	r31
 362:	ef 91       	pop	r30
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	bf 91       	pop	r27
 36a:	af 91       	pop	r26
 36c:	9f 91       	pop	r25
 36e:	8f 91       	pop	r24
 370:	7f 91       	pop	r23
 372:	6f 91       	pop	r22
 374:	5f 91       	pop	r21
 376:	4f 91       	pop	r20
 378:	3f 91       	pop	r19
 37a:	2f 91       	pop	r18
 37c:	0f 90       	pop	r0
 37e:	0b be       	out	0x3b, r0	; 59
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <__subsf3>:
 38a:	50 58       	subi	r21, 0x80	; 128

0000038c <__addsf3>:
 38c:	bb 27       	eor	r27, r27
 38e:	aa 27       	eor	r26, r26
 390:	0e d0       	rcall	.+28     	; 0x3ae <__addsf3x>
 392:	e0 c0       	rjmp	.+448    	; 0x554 <__fp_round>
 394:	d1 d0       	rcall	.+418    	; 0x538 <__fp_pscA>
 396:	30 f0       	brcs	.+12     	; 0x3a4 <__addsf3+0x18>
 398:	d6 d0       	rcall	.+428    	; 0x546 <__fp_pscB>
 39a:	20 f0       	brcs	.+8      	; 0x3a4 <__addsf3+0x18>
 39c:	31 f4       	brne	.+12     	; 0x3aa <__addsf3+0x1e>
 39e:	9f 3f       	cpi	r25, 0xFF	; 255
 3a0:	11 f4       	brne	.+4      	; 0x3a6 <__addsf3+0x1a>
 3a2:	1e f4       	brtc	.+6      	; 0x3aa <__addsf3+0x1e>
 3a4:	c6 c0       	rjmp	.+396    	; 0x532 <__fp_nan>
 3a6:	0e f4       	brtc	.+2      	; 0x3aa <__addsf3+0x1e>
 3a8:	e0 95       	com	r30
 3aa:	e7 fb       	bst	r30, 7
 3ac:	bc c0       	rjmp	.+376    	; 0x526 <__fp_inf>

000003ae <__addsf3x>:
 3ae:	e9 2f       	mov	r30, r25
 3b0:	e2 d0       	rcall	.+452    	; 0x576 <__fp_split3>
 3b2:	80 f3       	brcs	.-32     	; 0x394 <__addsf3+0x8>
 3b4:	ba 17       	cp	r27, r26
 3b6:	62 07       	cpc	r22, r18
 3b8:	73 07       	cpc	r23, r19
 3ba:	84 07       	cpc	r24, r20
 3bc:	95 07       	cpc	r25, r21
 3be:	18 f0       	brcs	.+6      	; 0x3c6 <__addsf3x+0x18>
 3c0:	71 f4       	brne	.+28     	; 0x3de <__addsf3x+0x30>
 3c2:	9e f5       	brtc	.+102    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 3c4:	fa c0       	rjmp	.+500    	; 0x5ba <__fp_zero>
 3c6:	0e f4       	brtc	.+2      	; 0x3ca <__addsf3x+0x1c>
 3c8:	e0 95       	com	r30
 3ca:	0b 2e       	mov	r0, r27
 3cc:	ba 2f       	mov	r27, r26
 3ce:	a0 2d       	mov	r26, r0
 3d0:	0b 01       	movw	r0, r22
 3d2:	b9 01       	movw	r22, r18
 3d4:	90 01       	movw	r18, r0
 3d6:	0c 01       	movw	r0, r24
 3d8:	ca 01       	movw	r24, r20
 3da:	a0 01       	movw	r20, r0
 3dc:	11 24       	eor	r1, r1
 3de:	ff 27       	eor	r31, r31
 3e0:	59 1b       	sub	r21, r25
 3e2:	99 f0       	breq	.+38     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3e4:	59 3f       	cpi	r21, 0xF9	; 249
 3e6:	50 f4       	brcc	.+20     	; 0x3fc <__addsf3x+0x4e>
 3e8:	50 3e       	cpi	r21, 0xE0	; 224
 3ea:	68 f1       	brcs	.+90     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 3ec:	1a 16       	cp	r1, r26
 3ee:	f0 40       	sbci	r31, 0x00	; 0
 3f0:	a2 2f       	mov	r26, r18
 3f2:	23 2f       	mov	r18, r19
 3f4:	34 2f       	mov	r19, r20
 3f6:	44 27       	eor	r20, r20
 3f8:	58 5f       	subi	r21, 0xF8	; 248
 3fa:	f3 cf       	rjmp	.-26     	; 0x3e2 <__addsf3x+0x34>
 3fc:	46 95       	lsr	r20
 3fe:	37 95       	ror	r19
 400:	27 95       	ror	r18
 402:	a7 95       	ror	r26
 404:	f0 40       	sbci	r31, 0x00	; 0
 406:	53 95       	inc	r21
 408:	c9 f7       	brne	.-14     	; 0x3fc <__addsf3x+0x4e>
 40a:	7e f4       	brtc	.+30     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 40c:	1f 16       	cp	r1, r31
 40e:	ba 0b       	sbc	r27, r26
 410:	62 0b       	sbc	r22, r18
 412:	73 0b       	sbc	r23, r19
 414:	84 0b       	sbc	r24, r20
 416:	ba f0       	brmi	.+46     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 418:	91 50       	subi	r25, 0x01	; 1
 41a:	a1 f0       	breq	.+40     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 41c:	ff 0f       	add	r31, r31
 41e:	bb 1f       	adc	r27, r27
 420:	66 1f       	adc	r22, r22
 422:	77 1f       	adc	r23, r23
 424:	88 1f       	adc	r24, r24
 426:	c2 f7       	brpl	.-16     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 428:	0e c0       	rjmp	.+28     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 42a:	ba 0f       	add	r27, r26
 42c:	62 1f       	adc	r22, r18
 42e:	73 1f       	adc	r23, r19
 430:	84 1f       	adc	r24, r20
 432:	48 f4       	brcc	.+18     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 434:	87 95       	ror	r24
 436:	77 95       	ror	r23
 438:	67 95       	ror	r22
 43a:	b7 95       	ror	r27
 43c:	f7 95       	ror	r31
 43e:	9e 3f       	cpi	r25, 0xFE	; 254
 440:	08 f0       	brcs	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 442:	b3 cf       	rjmp	.-154    	; 0x3aa <__addsf3+0x1e>
 444:	93 95       	inc	r25
 446:	88 0f       	add	r24, r24
 448:	08 f0       	brcs	.+2      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 44a:	99 27       	eor	r25, r25
 44c:	ee 0f       	add	r30, r30
 44e:	97 95       	ror	r25
 450:	87 95       	ror	r24
 452:	08 95       	ret

00000454 <__fixunssfsi>:
 454:	98 d0       	rcall	.+304    	; 0x586 <__fp_splitA>
 456:	88 f0       	brcs	.+34     	; 0x47a <__fixunssfsi+0x26>
 458:	9f 57       	subi	r25, 0x7F	; 127
 45a:	90 f0       	brcs	.+36     	; 0x480 <__fixunssfsi+0x2c>
 45c:	b9 2f       	mov	r27, r25
 45e:	99 27       	eor	r25, r25
 460:	b7 51       	subi	r27, 0x17	; 23
 462:	a0 f0       	brcs	.+40     	; 0x48c <__fixunssfsi+0x38>
 464:	d1 f0       	breq	.+52     	; 0x49a <__fixunssfsi+0x46>
 466:	66 0f       	add	r22, r22
 468:	77 1f       	adc	r23, r23
 46a:	88 1f       	adc	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	1a f0       	brmi	.+6      	; 0x476 <__fixunssfsi+0x22>
 470:	ba 95       	dec	r27
 472:	c9 f7       	brne	.-14     	; 0x466 <__fixunssfsi+0x12>
 474:	12 c0       	rjmp	.+36     	; 0x49a <__fixunssfsi+0x46>
 476:	b1 30       	cpi	r27, 0x01	; 1
 478:	81 f0       	breq	.+32     	; 0x49a <__fixunssfsi+0x46>
 47a:	9f d0       	rcall	.+318    	; 0x5ba <__fp_zero>
 47c:	b1 e0       	ldi	r27, 0x01	; 1
 47e:	08 95       	ret
 480:	9c c0       	rjmp	.+312    	; 0x5ba <__fp_zero>
 482:	67 2f       	mov	r22, r23
 484:	78 2f       	mov	r23, r24
 486:	88 27       	eor	r24, r24
 488:	b8 5f       	subi	r27, 0xF8	; 248
 48a:	39 f0       	breq	.+14     	; 0x49a <__fixunssfsi+0x46>
 48c:	b9 3f       	cpi	r27, 0xF9	; 249
 48e:	cc f3       	brlt	.-14     	; 0x482 <__fixunssfsi+0x2e>
 490:	86 95       	lsr	r24
 492:	77 95       	ror	r23
 494:	67 95       	ror	r22
 496:	b3 95       	inc	r27
 498:	d9 f7       	brne	.-10     	; 0x490 <__fixunssfsi+0x3c>
 49a:	3e f4       	brtc	.+14     	; 0x4aa <__fixunssfsi+0x56>
 49c:	90 95       	com	r25
 49e:	80 95       	com	r24
 4a0:	70 95       	com	r23
 4a2:	61 95       	neg	r22
 4a4:	7f 4f       	sbci	r23, 0xFF	; 255
 4a6:	8f 4f       	sbci	r24, 0xFF	; 255
 4a8:	9f 4f       	sbci	r25, 0xFF	; 255
 4aa:	08 95       	ret

000004ac <__floatunsisf>:
 4ac:	e8 94       	clt
 4ae:	09 c0       	rjmp	.+18     	; 0x4c2 <__floatsisf+0x12>

000004b0 <__floatsisf>:
 4b0:	97 fb       	bst	r25, 7
 4b2:	3e f4       	brtc	.+14     	; 0x4c2 <__floatsisf+0x12>
 4b4:	90 95       	com	r25
 4b6:	80 95       	com	r24
 4b8:	70 95       	com	r23
 4ba:	61 95       	neg	r22
 4bc:	7f 4f       	sbci	r23, 0xFF	; 255
 4be:	8f 4f       	sbci	r24, 0xFF	; 255
 4c0:	9f 4f       	sbci	r25, 0xFF	; 255
 4c2:	99 23       	and	r25, r25
 4c4:	a9 f0       	breq	.+42     	; 0x4f0 <__floatsisf+0x40>
 4c6:	f9 2f       	mov	r31, r25
 4c8:	96 e9       	ldi	r25, 0x96	; 150
 4ca:	bb 27       	eor	r27, r27
 4cc:	93 95       	inc	r25
 4ce:	f6 95       	lsr	r31
 4d0:	87 95       	ror	r24
 4d2:	77 95       	ror	r23
 4d4:	67 95       	ror	r22
 4d6:	b7 95       	ror	r27
 4d8:	f1 11       	cpse	r31, r1
 4da:	f8 cf       	rjmp	.-16     	; 0x4cc <__floatsisf+0x1c>
 4dc:	fa f4       	brpl	.+62     	; 0x51c <__floatsisf+0x6c>
 4de:	bb 0f       	add	r27, r27
 4e0:	11 f4       	brne	.+4      	; 0x4e6 <__floatsisf+0x36>
 4e2:	60 ff       	sbrs	r22, 0
 4e4:	1b c0       	rjmp	.+54     	; 0x51c <__floatsisf+0x6c>
 4e6:	6f 5f       	subi	r22, 0xFF	; 255
 4e8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ea:	8f 4f       	sbci	r24, 0xFF	; 255
 4ec:	9f 4f       	sbci	r25, 0xFF	; 255
 4ee:	16 c0       	rjmp	.+44     	; 0x51c <__floatsisf+0x6c>
 4f0:	88 23       	and	r24, r24
 4f2:	11 f0       	breq	.+4      	; 0x4f8 <__floatsisf+0x48>
 4f4:	96 e9       	ldi	r25, 0x96	; 150
 4f6:	11 c0       	rjmp	.+34     	; 0x51a <__floatsisf+0x6a>
 4f8:	77 23       	and	r23, r23
 4fa:	21 f0       	breq	.+8      	; 0x504 <__floatsisf+0x54>
 4fc:	9e e8       	ldi	r25, 0x8E	; 142
 4fe:	87 2f       	mov	r24, r23
 500:	76 2f       	mov	r23, r22
 502:	05 c0       	rjmp	.+10     	; 0x50e <__floatsisf+0x5e>
 504:	66 23       	and	r22, r22
 506:	71 f0       	breq	.+28     	; 0x524 <__floatsisf+0x74>
 508:	96 e8       	ldi	r25, 0x86	; 134
 50a:	86 2f       	mov	r24, r22
 50c:	70 e0       	ldi	r23, 0x00	; 0
 50e:	60 e0       	ldi	r22, 0x00	; 0
 510:	2a f0       	brmi	.+10     	; 0x51c <__floatsisf+0x6c>
 512:	9a 95       	dec	r25
 514:	66 0f       	add	r22, r22
 516:	77 1f       	adc	r23, r23
 518:	88 1f       	adc	r24, r24
 51a:	da f7       	brpl	.-10     	; 0x512 <__floatsisf+0x62>
 51c:	88 0f       	add	r24, r24
 51e:	96 95       	lsr	r25
 520:	87 95       	ror	r24
 522:	97 f9       	bld	r25, 7
 524:	08 95       	ret

00000526 <__fp_inf>:
 526:	97 f9       	bld	r25, 7
 528:	9f 67       	ori	r25, 0x7F	; 127
 52a:	80 e8       	ldi	r24, 0x80	; 128
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	60 e0       	ldi	r22, 0x00	; 0
 530:	08 95       	ret

00000532 <__fp_nan>:
 532:	9f ef       	ldi	r25, 0xFF	; 255
 534:	80 ec       	ldi	r24, 0xC0	; 192
 536:	08 95       	ret

00000538 <__fp_pscA>:
 538:	00 24       	eor	r0, r0
 53a:	0a 94       	dec	r0
 53c:	16 16       	cp	r1, r22
 53e:	17 06       	cpc	r1, r23
 540:	18 06       	cpc	r1, r24
 542:	09 06       	cpc	r0, r25
 544:	08 95       	ret

00000546 <__fp_pscB>:
 546:	00 24       	eor	r0, r0
 548:	0a 94       	dec	r0
 54a:	12 16       	cp	r1, r18
 54c:	13 06       	cpc	r1, r19
 54e:	14 06       	cpc	r1, r20
 550:	05 06       	cpc	r0, r21
 552:	08 95       	ret

00000554 <__fp_round>:
 554:	09 2e       	mov	r0, r25
 556:	03 94       	inc	r0
 558:	00 0c       	add	r0, r0
 55a:	11 f4       	brne	.+4      	; 0x560 <__fp_round+0xc>
 55c:	88 23       	and	r24, r24
 55e:	52 f0       	brmi	.+20     	; 0x574 <__fp_round+0x20>
 560:	bb 0f       	add	r27, r27
 562:	40 f4       	brcc	.+16     	; 0x574 <__fp_round+0x20>
 564:	bf 2b       	or	r27, r31
 566:	11 f4       	brne	.+4      	; 0x56c <__fp_round+0x18>
 568:	60 ff       	sbrs	r22, 0
 56a:	04 c0       	rjmp	.+8      	; 0x574 <__fp_round+0x20>
 56c:	6f 5f       	subi	r22, 0xFF	; 255
 56e:	7f 4f       	sbci	r23, 0xFF	; 255
 570:	8f 4f       	sbci	r24, 0xFF	; 255
 572:	9f 4f       	sbci	r25, 0xFF	; 255
 574:	08 95       	ret

00000576 <__fp_split3>:
 576:	57 fd       	sbrc	r21, 7
 578:	90 58       	subi	r25, 0x80	; 128
 57a:	44 0f       	add	r20, r20
 57c:	55 1f       	adc	r21, r21
 57e:	59 f0       	breq	.+22     	; 0x596 <__fp_splitA+0x10>
 580:	5f 3f       	cpi	r21, 0xFF	; 255
 582:	71 f0       	breq	.+28     	; 0x5a0 <__fp_splitA+0x1a>
 584:	47 95       	ror	r20

00000586 <__fp_splitA>:
 586:	88 0f       	add	r24, r24
 588:	97 fb       	bst	r25, 7
 58a:	99 1f       	adc	r25, r25
 58c:	61 f0       	breq	.+24     	; 0x5a6 <__fp_splitA+0x20>
 58e:	9f 3f       	cpi	r25, 0xFF	; 255
 590:	79 f0       	breq	.+30     	; 0x5b0 <__fp_splitA+0x2a>
 592:	87 95       	ror	r24
 594:	08 95       	ret
 596:	12 16       	cp	r1, r18
 598:	13 06       	cpc	r1, r19
 59a:	14 06       	cpc	r1, r20
 59c:	55 1f       	adc	r21, r21
 59e:	f2 cf       	rjmp	.-28     	; 0x584 <__fp_split3+0xe>
 5a0:	46 95       	lsr	r20
 5a2:	f1 df       	rcall	.-30     	; 0x586 <__fp_splitA>
 5a4:	08 c0       	rjmp	.+16     	; 0x5b6 <__fp_splitA+0x30>
 5a6:	16 16       	cp	r1, r22
 5a8:	17 06       	cpc	r1, r23
 5aa:	18 06       	cpc	r1, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	f1 cf       	rjmp	.-30     	; 0x592 <__fp_splitA+0xc>
 5b0:	86 95       	lsr	r24
 5b2:	71 05       	cpc	r23, r1
 5b4:	61 05       	cpc	r22, r1
 5b6:	08 94       	sec
 5b8:	08 95       	ret

000005ba <__fp_zero>:
 5ba:	e8 94       	clt

000005bc <__fp_szero>:
 5bc:	bb 27       	eor	r27, r27
 5be:	66 27       	eor	r22, r22
 5c0:	77 27       	eor	r23, r23
 5c2:	cb 01       	movw	r24, r22
 5c4:	97 f9       	bld	r25, 7
 5c6:	08 95       	ret

000005c8 <__mulsf3>:
 5c8:	0b d0       	rcall	.+22     	; 0x5e0 <__mulsf3x>
 5ca:	c4 cf       	rjmp	.-120    	; 0x554 <__fp_round>
 5cc:	b5 df       	rcall	.-150    	; 0x538 <__fp_pscA>
 5ce:	28 f0       	brcs	.+10     	; 0x5da <__mulsf3+0x12>
 5d0:	ba df       	rcall	.-140    	; 0x546 <__fp_pscB>
 5d2:	18 f0       	brcs	.+6      	; 0x5da <__mulsf3+0x12>
 5d4:	95 23       	and	r25, r21
 5d6:	09 f0       	breq	.+2      	; 0x5da <__mulsf3+0x12>
 5d8:	a6 cf       	rjmp	.-180    	; 0x526 <__fp_inf>
 5da:	ab cf       	rjmp	.-170    	; 0x532 <__fp_nan>
 5dc:	11 24       	eor	r1, r1
 5de:	ee cf       	rjmp	.-36     	; 0x5bc <__fp_szero>

000005e0 <__mulsf3x>:
 5e0:	ca df       	rcall	.-108    	; 0x576 <__fp_split3>
 5e2:	a0 f3       	brcs	.-24     	; 0x5cc <__mulsf3+0x4>

000005e4 <__mulsf3_pse>:
 5e4:	95 9f       	mul	r25, r21
 5e6:	d1 f3       	breq	.-12     	; 0x5dc <__mulsf3+0x14>
 5e8:	95 0f       	add	r25, r21
 5ea:	50 e0       	ldi	r21, 0x00	; 0
 5ec:	55 1f       	adc	r21, r21
 5ee:	62 9f       	mul	r22, r18
 5f0:	f0 01       	movw	r30, r0
 5f2:	72 9f       	mul	r23, r18
 5f4:	bb 27       	eor	r27, r27
 5f6:	f0 0d       	add	r31, r0
 5f8:	b1 1d       	adc	r27, r1
 5fa:	63 9f       	mul	r22, r19
 5fc:	aa 27       	eor	r26, r26
 5fe:	f0 0d       	add	r31, r0
 600:	b1 1d       	adc	r27, r1
 602:	aa 1f       	adc	r26, r26
 604:	64 9f       	mul	r22, r20
 606:	66 27       	eor	r22, r22
 608:	b0 0d       	add	r27, r0
 60a:	a1 1d       	adc	r26, r1
 60c:	66 1f       	adc	r22, r22
 60e:	82 9f       	mul	r24, r18
 610:	22 27       	eor	r18, r18
 612:	b0 0d       	add	r27, r0
 614:	a1 1d       	adc	r26, r1
 616:	62 1f       	adc	r22, r18
 618:	73 9f       	mul	r23, r19
 61a:	b0 0d       	add	r27, r0
 61c:	a1 1d       	adc	r26, r1
 61e:	62 1f       	adc	r22, r18
 620:	83 9f       	mul	r24, r19
 622:	a0 0d       	add	r26, r0
 624:	61 1d       	adc	r22, r1
 626:	22 1f       	adc	r18, r18
 628:	74 9f       	mul	r23, r20
 62a:	33 27       	eor	r19, r19
 62c:	a0 0d       	add	r26, r0
 62e:	61 1d       	adc	r22, r1
 630:	23 1f       	adc	r18, r19
 632:	84 9f       	mul	r24, r20
 634:	60 0d       	add	r22, r0
 636:	21 1d       	adc	r18, r1
 638:	82 2f       	mov	r24, r18
 63a:	76 2f       	mov	r23, r22
 63c:	6a 2f       	mov	r22, r26
 63e:	11 24       	eor	r1, r1
 640:	9f 57       	subi	r25, 0x7F	; 127
 642:	50 40       	sbci	r21, 0x00	; 0
 644:	8a f0       	brmi	.+34     	; 0x668 <__mulsf3_pse+0x84>
 646:	e1 f0       	breq	.+56     	; 0x680 <__mulsf3_pse+0x9c>
 648:	88 23       	and	r24, r24
 64a:	4a f0       	brmi	.+18     	; 0x65e <__mulsf3_pse+0x7a>
 64c:	ee 0f       	add	r30, r30
 64e:	ff 1f       	adc	r31, r31
 650:	bb 1f       	adc	r27, r27
 652:	66 1f       	adc	r22, r22
 654:	77 1f       	adc	r23, r23
 656:	88 1f       	adc	r24, r24
 658:	91 50       	subi	r25, 0x01	; 1
 65a:	50 40       	sbci	r21, 0x00	; 0
 65c:	a9 f7       	brne	.-22     	; 0x648 <__mulsf3_pse+0x64>
 65e:	9e 3f       	cpi	r25, 0xFE	; 254
 660:	51 05       	cpc	r21, r1
 662:	70 f0       	brcs	.+28     	; 0x680 <__mulsf3_pse+0x9c>
 664:	60 cf       	rjmp	.-320    	; 0x526 <__fp_inf>
 666:	aa cf       	rjmp	.-172    	; 0x5bc <__fp_szero>
 668:	5f 3f       	cpi	r21, 0xFF	; 255
 66a:	ec f3       	brlt	.-6      	; 0x666 <__mulsf3_pse+0x82>
 66c:	98 3e       	cpi	r25, 0xE8	; 232
 66e:	dc f3       	brlt	.-10     	; 0x666 <__mulsf3_pse+0x82>
 670:	86 95       	lsr	r24
 672:	77 95       	ror	r23
 674:	67 95       	ror	r22
 676:	b7 95       	ror	r27
 678:	f7 95       	ror	r31
 67a:	e7 95       	ror	r30
 67c:	9f 5f       	subi	r25, 0xFF	; 255
 67e:	c1 f7       	brne	.-16     	; 0x670 <__mulsf3_pse+0x8c>
 680:	fe 2b       	or	r31, r30
 682:	88 0f       	add	r24, r24
 684:	91 1d       	adc	r25, r1
 686:	96 95       	lsr	r25
 688:	87 95       	ror	r24
 68a:	97 f9       	bld	r25, 7
 68c:	08 95       	ret

0000068e <trunc>:
 68e:	2f d0       	rcall	.+94     	; 0x6ee <__fp_trunc>
 690:	20 f0       	brcs	.+8      	; 0x69a <trunc+0xc>
 692:	9f 37       	cpi	r25, 0x7F	; 127
 694:	08 f4       	brcc	.+2      	; 0x698 <trunc+0xa>
 696:	92 cf       	rjmp	.-220    	; 0x5bc <__fp_szero>
 698:	01 c0       	rjmp	.+2      	; 0x69c <__fp_mintl>
 69a:	1b c0       	rjmp	.+54     	; 0x6d2 <__fp_mpack>

0000069c <__fp_mintl>:
 69c:	88 23       	and	r24, r24
 69e:	71 f4       	brne	.+28     	; 0x6bc <__fp_mintl+0x20>
 6a0:	77 23       	and	r23, r23
 6a2:	21 f0       	breq	.+8      	; 0x6ac <__fp_mintl+0x10>
 6a4:	98 50       	subi	r25, 0x08	; 8
 6a6:	87 2b       	or	r24, r23
 6a8:	76 2f       	mov	r23, r22
 6aa:	07 c0       	rjmp	.+14     	; 0x6ba <__fp_mintl+0x1e>
 6ac:	66 23       	and	r22, r22
 6ae:	11 f4       	brne	.+4      	; 0x6b4 <__fp_mintl+0x18>
 6b0:	99 27       	eor	r25, r25
 6b2:	0d c0       	rjmp	.+26     	; 0x6ce <__fp_mintl+0x32>
 6b4:	90 51       	subi	r25, 0x10	; 16
 6b6:	86 2b       	or	r24, r22
 6b8:	70 e0       	ldi	r23, 0x00	; 0
 6ba:	60 e0       	ldi	r22, 0x00	; 0
 6bc:	2a f0       	brmi	.+10     	; 0x6c8 <__fp_mintl+0x2c>
 6be:	9a 95       	dec	r25
 6c0:	66 0f       	add	r22, r22
 6c2:	77 1f       	adc	r23, r23
 6c4:	88 1f       	adc	r24, r24
 6c6:	da f7       	brpl	.-10     	; 0x6be <__fp_mintl+0x22>
 6c8:	88 0f       	add	r24, r24
 6ca:	96 95       	lsr	r25
 6cc:	87 95       	ror	r24
 6ce:	97 f9       	bld	r25, 7
 6d0:	08 95       	ret

000006d2 <__fp_mpack>:
 6d2:	9f 3f       	cpi	r25, 0xFF	; 255
 6d4:	31 f0       	breq	.+12     	; 0x6e2 <__fp_mpack_finite+0xc>

000006d6 <__fp_mpack_finite>:
 6d6:	91 50       	subi	r25, 0x01	; 1
 6d8:	20 f4       	brcc	.+8      	; 0x6e2 <__fp_mpack_finite+0xc>
 6da:	87 95       	ror	r24
 6dc:	77 95       	ror	r23
 6de:	67 95       	ror	r22
 6e0:	b7 95       	ror	r27
 6e2:	88 0f       	add	r24, r24
 6e4:	91 1d       	adc	r25, r1
 6e6:	96 95       	lsr	r25
 6e8:	87 95       	ror	r24
 6ea:	97 f9       	bld	r25, 7
 6ec:	08 95       	ret

000006ee <__fp_trunc>:
 6ee:	4b df       	rcall	.-362    	; 0x586 <__fp_splitA>
 6f0:	a0 f0       	brcs	.+40     	; 0x71a <__fp_trunc+0x2c>
 6f2:	be e7       	ldi	r27, 0x7E	; 126
 6f4:	b9 17       	cp	r27, r25
 6f6:	88 f4       	brcc	.+34     	; 0x71a <__fp_trunc+0x2c>
 6f8:	bb 27       	eor	r27, r27
 6fa:	9f 38       	cpi	r25, 0x8F	; 143
 6fc:	60 f4       	brcc	.+24     	; 0x716 <__fp_trunc+0x28>
 6fe:	16 16       	cp	r1, r22
 700:	b1 1d       	adc	r27, r1
 702:	67 2f       	mov	r22, r23
 704:	78 2f       	mov	r23, r24
 706:	88 27       	eor	r24, r24
 708:	98 5f       	subi	r25, 0xF8	; 248
 70a:	f7 cf       	rjmp	.-18     	; 0x6fa <__fp_trunc+0xc>
 70c:	86 95       	lsr	r24
 70e:	77 95       	ror	r23
 710:	67 95       	ror	r22
 712:	b1 1d       	adc	r27, r1
 714:	93 95       	inc	r25
 716:	96 39       	cpi	r25, 0x96	; 150
 718:	c8 f3       	brcs	.-14     	; 0x70c <__fp_trunc+0x1e>
 71a:	08 95       	ret

0000071c <malloc>:
 71c:	0f 93       	push	r16
 71e:	1f 93       	push	r17
 720:	cf 93       	push	r28
 722:	df 93       	push	r29
 724:	82 30       	cpi	r24, 0x02	; 2
 726:	91 05       	cpc	r25, r1
 728:	10 f4       	brcc	.+4      	; 0x72e <malloc+0x12>
 72a:	82 e0       	ldi	r24, 0x02	; 2
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <__flp>
 732:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <__flp+0x1>
 736:	20 e0       	ldi	r18, 0x00	; 0
 738:	30 e0       	ldi	r19, 0x00	; 0
 73a:	a0 e0       	ldi	r26, 0x00	; 0
 73c:	b0 e0       	ldi	r27, 0x00	; 0
 73e:	30 97       	sbiw	r30, 0x00	; 0
 740:	19 f1       	breq	.+70     	; 0x788 <malloc+0x6c>
 742:	40 81       	ld	r20, Z
 744:	51 81       	ldd	r21, Z+1	; 0x01
 746:	02 81       	ldd	r16, Z+2	; 0x02
 748:	13 81       	ldd	r17, Z+3	; 0x03
 74a:	48 17       	cp	r20, r24
 74c:	59 07       	cpc	r21, r25
 74e:	c8 f0       	brcs	.+50     	; 0x782 <malloc+0x66>
 750:	84 17       	cp	r24, r20
 752:	95 07       	cpc	r25, r21
 754:	69 f4       	brne	.+26     	; 0x770 <malloc+0x54>
 756:	10 97       	sbiw	r26, 0x00	; 0
 758:	31 f0       	breq	.+12     	; 0x766 <malloc+0x4a>
 75a:	12 96       	adiw	r26, 0x02	; 2
 75c:	0c 93       	st	X, r16
 75e:	12 97       	sbiw	r26, 0x02	; 2
 760:	13 96       	adiw	r26, 0x03	; 3
 762:	1c 93       	st	X, r17
 764:	27 c0       	rjmp	.+78     	; 0x7b4 <malloc+0x98>
 766:	00 93 16 02 	sts	0x0216, r16	; 0x800216 <__flp>
 76a:	10 93 17 02 	sts	0x0217, r17	; 0x800217 <__flp+0x1>
 76e:	22 c0       	rjmp	.+68     	; 0x7b4 <malloc+0x98>
 770:	21 15       	cp	r18, r1
 772:	31 05       	cpc	r19, r1
 774:	19 f0       	breq	.+6      	; 0x77c <malloc+0x60>
 776:	42 17       	cp	r20, r18
 778:	53 07       	cpc	r21, r19
 77a:	18 f4       	brcc	.+6      	; 0x782 <malloc+0x66>
 77c:	9a 01       	movw	r18, r20
 77e:	bd 01       	movw	r22, r26
 780:	ef 01       	movw	r28, r30
 782:	df 01       	movw	r26, r30
 784:	f8 01       	movw	r30, r16
 786:	db cf       	rjmp	.-74     	; 0x73e <malloc+0x22>
 788:	21 15       	cp	r18, r1
 78a:	31 05       	cpc	r19, r1
 78c:	f9 f0       	breq	.+62     	; 0x7cc <malloc+0xb0>
 78e:	28 1b       	sub	r18, r24
 790:	39 0b       	sbc	r19, r25
 792:	24 30       	cpi	r18, 0x04	; 4
 794:	31 05       	cpc	r19, r1
 796:	80 f4       	brcc	.+32     	; 0x7b8 <malloc+0x9c>
 798:	8a 81       	ldd	r24, Y+2	; 0x02
 79a:	9b 81       	ldd	r25, Y+3	; 0x03
 79c:	61 15       	cp	r22, r1
 79e:	71 05       	cpc	r23, r1
 7a0:	21 f0       	breq	.+8      	; 0x7aa <malloc+0x8e>
 7a2:	fb 01       	movw	r30, r22
 7a4:	93 83       	std	Z+3, r25	; 0x03
 7a6:	82 83       	std	Z+2, r24	; 0x02
 7a8:	04 c0       	rjmp	.+8      	; 0x7b2 <malloc+0x96>
 7aa:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <__flp+0x1>
 7ae:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <__flp>
 7b2:	fe 01       	movw	r30, r28
 7b4:	32 96       	adiw	r30, 0x02	; 2
 7b6:	44 c0       	rjmp	.+136    	; 0x840 <malloc+0x124>
 7b8:	fe 01       	movw	r30, r28
 7ba:	e2 0f       	add	r30, r18
 7bc:	f3 1f       	adc	r31, r19
 7be:	81 93       	st	Z+, r24
 7c0:	91 93       	st	Z+, r25
 7c2:	22 50       	subi	r18, 0x02	; 2
 7c4:	31 09       	sbc	r19, r1
 7c6:	39 83       	std	Y+1, r19	; 0x01
 7c8:	28 83       	st	Y, r18
 7ca:	3a c0       	rjmp	.+116    	; 0x840 <malloc+0x124>
 7cc:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <__brkval>
 7d0:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <__brkval+0x1>
 7d4:	23 2b       	or	r18, r19
 7d6:	41 f4       	brne	.+16     	; 0x7e8 <malloc+0xcc>
 7d8:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 7dc:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 7e0:	30 93 15 02 	sts	0x0215, r19	; 0x800215 <__brkval+0x1>
 7e4:	20 93 14 02 	sts	0x0214, r18	; 0x800214 <__brkval>
 7e8:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 7ec:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 7f0:	21 15       	cp	r18, r1
 7f2:	31 05       	cpc	r19, r1
 7f4:	41 f4       	brne	.+16     	; 0x806 <malloc+0xea>
 7f6:	2d b7       	in	r18, 0x3d	; 61
 7f8:	3e b7       	in	r19, 0x3e	; 62
 7fa:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 7fe:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 802:	24 1b       	sub	r18, r20
 804:	35 0b       	sbc	r19, r21
 806:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <__brkval>
 80a:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <__brkval+0x1>
 80e:	e2 17       	cp	r30, r18
 810:	f3 07       	cpc	r31, r19
 812:	a0 f4       	brcc	.+40     	; 0x83c <malloc+0x120>
 814:	2e 1b       	sub	r18, r30
 816:	3f 0b       	sbc	r19, r31
 818:	28 17       	cp	r18, r24
 81a:	39 07       	cpc	r19, r25
 81c:	78 f0       	brcs	.+30     	; 0x83c <malloc+0x120>
 81e:	ac 01       	movw	r20, r24
 820:	4e 5f       	subi	r20, 0xFE	; 254
 822:	5f 4f       	sbci	r21, 0xFF	; 255
 824:	24 17       	cp	r18, r20
 826:	35 07       	cpc	r19, r21
 828:	48 f0       	brcs	.+18     	; 0x83c <malloc+0x120>
 82a:	4e 0f       	add	r20, r30
 82c:	5f 1f       	adc	r21, r31
 82e:	50 93 15 02 	sts	0x0215, r21	; 0x800215 <__brkval+0x1>
 832:	40 93 14 02 	sts	0x0214, r20	; 0x800214 <__brkval>
 836:	81 93       	st	Z+, r24
 838:	91 93       	st	Z+, r25
 83a:	02 c0       	rjmp	.+4      	; 0x840 <malloc+0x124>
 83c:	e0 e0       	ldi	r30, 0x00	; 0
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	cf 01       	movw	r24, r30
 842:	df 91       	pop	r29
 844:	cf 91       	pop	r28
 846:	1f 91       	pop	r17
 848:	0f 91       	pop	r16
 84a:	08 95       	ret

0000084c <free>:
 84c:	cf 93       	push	r28
 84e:	df 93       	push	r29
 850:	00 97       	sbiw	r24, 0x00	; 0
 852:	09 f4       	brne	.+2      	; 0x856 <free+0xa>
 854:	81 c0       	rjmp	.+258    	; 0x958 <free+0x10c>
 856:	fc 01       	movw	r30, r24
 858:	32 97       	sbiw	r30, 0x02	; 2
 85a:	13 82       	std	Z+3, r1	; 0x03
 85c:	12 82       	std	Z+2, r1	; 0x02
 85e:	a0 91 16 02 	lds	r26, 0x0216	; 0x800216 <__flp>
 862:	b0 91 17 02 	lds	r27, 0x0217	; 0x800217 <__flp+0x1>
 866:	10 97       	sbiw	r26, 0x00	; 0
 868:	81 f4       	brne	.+32     	; 0x88a <free+0x3e>
 86a:	20 81       	ld	r18, Z
 86c:	31 81       	ldd	r19, Z+1	; 0x01
 86e:	82 0f       	add	r24, r18
 870:	93 1f       	adc	r25, r19
 872:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <__brkval>
 876:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <__brkval+0x1>
 87a:	28 17       	cp	r18, r24
 87c:	39 07       	cpc	r19, r25
 87e:	51 f5       	brne	.+84     	; 0x8d4 <free+0x88>
 880:	f0 93 15 02 	sts	0x0215, r31	; 0x800215 <__brkval+0x1>
 884:	e0 93 14 02 	sts	0x0214, r30	; 0x800214 <__brkval>
 888:	67 c0       	rjmp	.+206    	; 0x958 <free+0x10c>
 88a:	ed 01       	movw	r28, r26
 88c:	20 e0       	ldi	r18, 0x00	; 0
 88e:	30 e0       	ldi	r19, 0x00	; 0
 890:	ce 17       	cp	r28, r30
 892:	df 07       	cpc	r29, r31
 894:	40 f4       	brcc	.+16     	; 0x8a6 <free+0x5a>
 896:	4a 81       	ldd	r20, Y+2	; 0x02
 898:	5b 81       	ldd	r21, Y+3	; 0x03
 89a:	9e 01       	movw	r18, r28
 89c:	41 15       	cp	r20, r1
 89e:	51 05       	cpc	r21, r1
 8a0:	f1 f0       	breq	.+60     	; 0x8de <free+0x92>
 8a2:	ea 01       	movw	r28, r20
 8a4:	f5 cf       	rjmp	.-22     	; 0x890 <free+0x44>
 8a6:	d3 83       	std	Z+3, r29	; 0x03
 8a8:	c2 83       	std	Z+2, r28	; 0x02
 8aa:	40 81       	ld	r20, Z
 8ac:	51 81       	ldd	r21, Z+1	; 0x01
 8ae:	84 0f       	add	r24, r20
 8b0:	95 1f       	adc	r25, r21
 8b2:	c8 17       	cp	r28, r24
 8b4:	d9 07       	cpc	r29, r25
 8b6:	59 f4       	brne	.+22     	; 0x8ce <free+0x82>
 8b8:	88 81       	ld	r24, Y
 8ba:	99 81       	ldd	r25, Y+1	; 0x01
 8bc:	84 0f       	add	r24, r20
 8be:	95 1f       	adc	r25, r21
 8c0:	02 96       	adiw	r24, 0x02	; 2
 8c2:	91 83       	std	Z+1, r25	; 0x01
 8c4:	80 83       	st	Z, r24
 8c6:	8a 81       	ldd	r24, Y+2	; 0x02
 8c8:	9b 81       	ldd	r25, Y+3	; 0x03
 8ca:	93 83       	std	Z+3, r25	; 0x03
 8cc:	82 83       	std	Z+2, r24	; 0x02
 8ce:	21 15       	cp	r18, r1
 8d0:	31 05       	cpc	r19, r1
 8d2:	29 f4       	brne	.+10     	; 0x8de <free+0x92>
 8d4:	f0 93 17 02 	sts	0x0217, r31	; 0x800217 <__flp+0x1>
 8d8:	e0 93 16 02 	sts	0x0216, r30	; 0x800216 <__flp>
 8dc:	3d c0       	rjmp	.+122    	; 0x958 <free+0x10c>
 8de:	e9 01       	movw	r28, r18
 8e0:	fb 83       	std	Y+3, r31	; 0x03
 8e2:	ea 83       	std	Y+2, r30	; 0x02
 8e4:	49 91       	ld	r20, Y+
 8e6:	59 91       	ld	r21, Y+
 8e8:	c4 0f       	add	r28, r20
 8ea:	d5 1f       	adc	r29, r21
 8ec:	ec 17       	cp	r30, r28
 8ee:	fd 07       	cpc	r31, r29
 8f0:	61 f4       	brne	.+24     	; 0x90a <free+0xbe>
 8f2:	80 81       	ld	r24, Z
 8f4:	91 81       	ldd	r25, Z+1	; 0x01
 8f6:	84 0f       	add	r24, r20
 8f8:	95 1f       	adc	r25, r21
 8fa:	02 96       	adiw	r24, 0x02	; 2
 8fc:	e9 01       	movw	r28, r18
 8fe:	99 83       	std	Y+1, r25	; 0x01
 900:	88 83       	st	Y, r24
 902:	82 81       	ldd	r24, Z+2	; 0x02
 904:	93 81       	ldd	r25, Z+3	; 0x03
 906:	9b 83       	std	Y+3, r25	; 0x03
 908:	8a 83       	std	Y+2, r24	; 0x02
 90a:	e0 e0       	ldi	r30, 0x00	; 0
 90c:	f0 e0       	ldi	r31, 0x00	; 0
 90e:	12 96       	adiw	r26, 0x02	; 2
 910:	8d 91       	ld	r24, X+
 912:	9c 91       	ld	r25, X
 914:	13 97       	sbiw	r26, 0x03	; 3
 916:	00 97       	sbiw	r24, 0x00	; 0
 918:	19 f0       	breq	.+6      	; 0x920 <free+0xd4>
 91a:	fd 01       	movw	r30, r26
 91c:	dc 01       	movw	r26, r24
 91e:	f7 cf       	rjmp	.-18     	; 0x90e <free+0xc2>
 920:	8d 91       	ld	r24, X+
 922:	9c 91       	ld	r25, X
 924:	11 97       	sbiw	r26, 0x01	; 1
 926:	9d 01       	movw	r18, r26
 928:	2e 5f       	subi	r18, 0xFE	; 254
 92a:	3f 4f       	sbci	r19, 0xFF	; 255
 92c:	82 0f       	add	r24, r18
 92e:	93 1f       	adc	r25, r19
 930:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <__brkval>
 934:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <__brkval+0x1>
 938:	28 17       	cp	r18, r24
 93a:	39 07       	cpc	r19, r25
 93c:	69 f4       	brne	.+26     	; 0x958 <free+0x10c>
 93e:	30 97       	sbiw	r30, 0x00	; 0
 940:	29 f4       	brne	.+10     	; 0x94c <free+0x100>
 942:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <__flp+0x1>
 946:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <__flp>
 94a:	02 c0       	rjmp	.+4      	; 0x950 <free+0x104>
 94c:	13 82       	std	Z+3, r1	; 0x03
 94e:	12 82       	std	Z+2, r1	; 0x02
 950:	b0 93 15 02 	sts	0x0215, r27	; 0x800215 <__brkval+0x1>
 954:	a0 93 14 02 	sts	0x0214, r26	; 0x800214 <__brkval>
 958:	df 91       	pop	r29
 95a:	cf 91       	pop	r28
 95c:	08 95       	ret

0000095e <_exit>:
 95e:	f8 94       	cli

00000960 <__stop_program>:
 960:	ff cf       	rjmp	.-2      	; 0x960 <__stop_program>
