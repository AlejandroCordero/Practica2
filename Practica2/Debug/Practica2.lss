
Practica2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  0000062e  000006a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000062e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e46  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ca2  00000000  00000000  0000158a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c6  00000000  00000000  0000222c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000025f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005b7  00000000  00000000  00002638  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000018f  00000000  00000000  00002bef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002d7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e2       	ldi	r30, 0x2E	; 46
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 30       	cpi	r26, 0x0A	; 10
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	17 d0       	rcall	.+46     	; 0x13e <main>
 110:	8c c2       	rjmp	.+1304   	; 0x62a <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <ADC_read>:
#include <util/delay.h>

unsigned int ADC_read(unsigned char chnl)
{
	chnl=chnl & 0b00000111;								// Select adc channel between 0 to 7
	ADMUX=0x40;											// Channel A0 selected
 114:	80 e4       	ldi	r24, 0x40	; 64
 116:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA|=(1<<ADSC);									// Start conversion
 11a:	ea e7       	ldi	r30, 0x7A	; 122
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 64       	ori	r24, 0x40	; 64
 122:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));						// Wait for ADIF conversion complete return
 124:	80 81       	ld	r24, Z
 126:	84 ff       	sbrs	r24, 4
 128:	fd cf       	rjmp	.-6      	; 0x124 <ADC_read+0x10>
	ADCSRA|=(1<<ADIF);									// Clear ADIF when conversion complete by writing 1
 12a:	ea e7       	ldi	r30, 0x7A	; 122
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	80 61       	ori	r24, 0x10	; 16
 132:	80 83       	st	Z, r24
	return (ADC);										// Return calculated ADC value
 134:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
 138:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
}														
 13c:	08 95       	ret

0000013e <main>:
// Source: https://circuitdigest.com/microcontroller-projects/how-to-use-adc-in-avr-microcontroller-atmega16
  
int main(void)
{
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
 146:	6b 97       	sbiw	r28, 0x1b	; 27
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	f8 94       	cli
 14c:	de bf       	out	0x3e, r29	; 62
 14e:	0f be       	out	0x3f, r0	; 63
 150:	cd bf       	out	0x3d, r28	; 61
/*------1 for outputs y 0 for inputs-----*/

DDRC=0b11111111;										// 7 segments of display are setup as output pins				
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	87 b9       	out	0x07, r24	; 7
DDRA=0b00000111;										// 3 digital GND are setup as outputs to multiplex which digit is shown in display
 156:	87 e0       	ldi	r24, 0x07	; 7
 158:	81 b9       	out	0x01, r24	; 1

//Analog input
DDRF=0b11111110;										// Potenciometer analog input
 15a:	8e ef       	ldi	r24, 0xFE	; 254
 15c:	80 bb       	out	0x10, r24	; 16

const int nDigit = 3;									// Number of digits shown in Display
const uint8_t DisplayCC[10] = {0b0111111, 0b0000110, 0b1011011, 0b1001111, 0b1100110,
 15e:	8a e0       	ldi	r24, 0x0A	; 10
 160:	e0 e0       	ldi	r30, 0x00	; 0
 162:	f2 e0       	ldi	r31, 0x02	; 2
 164:	de 01       	movw	r26, r28
 166:	50 96       	adiw	r26, 0x10	; 16
 168:	01 90       	ld	r0, Z+
 16a:	0d 92       	st	X+, r0
 16c:	8a 95       	dec	r24
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0x2a>
	0b1101101, 0b1111101, 0b0000111, 0b1111111, 0b1101111};
	
uint8_t* pDisplayCC=&DisplayCC;						   // pDisplayCC is initialized to point to the address of DisplayCC

ADMUX=(1<<REFS0);									   // Selecting internal reference voltage
 170:	80 e4       	ldi	r24, 0x40	; 64
 172:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);     // Enable ADC also set Prescaler as 128
 176:	87 e8       	ldi	r24, 0x87	; 135
 178:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
 17c:	4e 01       	movw	r8, r28
 17e:	8c e0       	ldi	r24, 0x0C	; 12
 180:	88 0e       	add	r8, r24
 182:	91 1c       	adc	r9, r1
float pot[nDigit];
uint8_t poti[nDigit];   
int j,k;
	while (1)
    {
		pot[0]=(ADC_read(PINF0)*5.0)/1024;			   // First float value is read from ADC input
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	c6 df       	rcall	.-116    	; 0x114 <ADC_read>
 188:	bc 01       	movw	r22, r24
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	15 d1       	rcall	.+554    	; 0x3ba <__floatunsisf>
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	40 ea       	ldi	r20, 0xA0	; 160
 196:	50 e4       	ldi	r21, 0x40	; 64
 198:	9e d1       	rcall	.+828    	; 0x4d6 <__mulsf3>
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	40 e8       	ldi	r20, 0x80	; 128
 1a0:	5a e3       	ldi	r21, 0x3A	; 58
 1a2:	99 d1       	rcall	.+818    	; 0x4d6 <__mulsf3>
 1a4:	6c 83       	std	Y+4, r22	; 0x04
 1a6:	7d 83       	std	Y+5, r23	; 0x05
 1a8:	8e 83       	std	Y+6, r24	; 0x06
 1aa:	9f 83       	std	Y+7, r25	; 0x07
		poti[0]=trunc(pot[0]);						   // First float value is truncated to integer
 1ac:	f7 d1       	rcall	.+1006   	; 0x59c <trunc>
 1ae:	d9 d0       	rcall	.+434    	; 0x362 <__fixunssfsi>
 1b0:	69 83       	std	Y+1, r22	; 0x01
 1b2:	fe 01       	movw	r30, r28
 1b4:	31 96       	adiw	r30, 0x01	; 1
 1b6:	5f 01       	movw	r10, r30
 1b8:	cc 24       	eor	r12, r12
 1ba:	c3 94       	inc	r12
 1bc:	d1 2c       	mov	r13, r1
 1be:	21 2c       	mov	r2, r1
 1c0:	31 2c       	mov	r3, r1
 1c2:	60 c0       	rjmp	.+192    	; 0x284 <main+0x146>
 1c4:	f8 01       	movw	r30, r16
 1c6:	41 90       	ld	r4, Z+
		
		for (j=0;j<nDigit;j++)
		{	
			for (k=1;k<nDigit;k++)					  // The following algorithm initializes all values to be shown on display converting each decimal in integer
			{
				pot[k]=10*(pot[k-1]-trunc(pot[k-1])); 
 1c8:	51 90       	ld	r5, Z+
 1ca:	61 90       	ld	r6, Z+
 1cc:	71 90       	ld	r7, Z+
 1ce:	8f 01       	movw	r16, r30
 1d0:	c3 01       	movw	r24, r6
 1d2:	b2 01       	movw	r22, r4
 1d4:	e3 d1       	rcall	.+966    	; 0x59c <trunc>
 1d6:	9b 01       	movw	r18, r22
 1d8:	ac 01       	movw	r20, r24
 1da:	c3 01       	movw	r24, r6
 1dc:	b2 01       	movw	r22, r4
 1de:	5c d0       	rcall	.+184    	; 0x298 <__subsf3>
 1e0:	20 e0       	ldi	r18, 0x00	; 0
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	40 e2       	ldi	r20, 0x20	; 32
 1e6:	51 e4       	ldi	r21, 0x41	; 65
 1e8:	76 d1       	rcall	.+748    	; 0x4d6 <__mulsf3>
 1ea:	f8 01       	movw	r30, r16
 1ec:	60 83       	st	Z, r22
 1ee:	71 83       	std	Z+1, r23	; 0x01
 1f0:	82 83       	std	Z+2, r24	; 0x02
 1f2:	93 83       	std	Z+3, r25	; 0x03
				poti[k]=trunc(pot[k]);
 1f4:	d3 d1       	rcall	.+934    	; 0x59c <trunc>
 1f6:	b5 d0       	rcall	.+362    	; 0x362 <__fixunssfsi>
 1f8:	f7 01       	movw	r30, r14
 1fa:	61 93       	st	Z+, r22
 1fc:	7f 01       	movw	r14, r30
 1fe:	08 15       	cp	r16, r8
 200:	19 05       	cpc	r17, r9
		pot[0]=(ADC_read(PINF0)*5.0)/1024;			   // First float value is read from ADC input
		poti[0]=trunc(pot[0]);						   // First float value is truncated to integer
		
		for (j=0;j<nDigit;j++)
		{	
			for (k=1;k<nDigit;k++)					  // The following algorithm initializes all values to be shown on display converting each decimal in integer
 202:	01 f7       	brne	.-64     	; 0x1c4 <main+0x86>
 204:	8a 8d       	ldd	r24, Y+26	; 0x1a
 206:	9b 8d       	ldd	r25, Y+27	; 0x1b
			{
				pot[k]=10*(pot[k-1]-trunc(pot[k-1])); 
				poti[k]=trunc(pot[k]);
			}
						
			if (j==0)									// First digit
 208:	89 2b       	or	r24, r25
 20a:	99 f4       	brne	.+38     	; 0x232 <main+0xf4>
 20c:	89 81       	ldd	r24, Y+1	; 0x01
 20e:	e0 e1       	ldi	r30, 0x10	; 16
			{
				PORTC=*(pDisplayCC+poti[j]) | 0x80;
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	ec 0f       	add	r30, r28
 214:	fd 1f       	adc	r31, r29
 216:	e8 0f       	add	r30, r24
 218:	f1 1d       	adc	r31, r1
 21a:	80 81       	ld	r24, Z
 21c:	80 68       	ori	r24, 0x80	; 128
 21e:	88 b9       	out	0x08, r24	; 8
 220:	9b ef       	ldi	r25, 0xFB	; 251
 222:	92 b9       	out	0x02, r25	; 2
				PORTA=0xFB;
 224:	ef ed       	ldi	r30, 0xDF	; 223
 226:	fe e2       	ldi	r31, 0x2E	; 46
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 228:	31 97       	sbiw	r30, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <main+0xea>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0xf0>
 22e:	00 00       	nop
 230:	20 c0       	rjmp	.+64     	; 0x272 <main+0x134>
 232:	f5 01       	movw	r30, r10
 234:	80 81       	ld	r24, Z
				_delay_ms(3);
			}
			else {										// Rest of digits
				PORTC=*(pDisplayCC+poti[j]) & 0x7F;
 236:	e0 e1       	ldi	r30, 0x10	; 16
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	ec 0f       	add	r30, r28
 23c:	fd 1f       	adc	r31, r29
 23e:	e8 0f       	add	r30, r24
 240:	f1 1d       	adc	r31, r1
 242:	80 81       	ld	r24, Z
 244:	8f 77       	andi	r24, 0x7F	; 127
 246:	88 b9       	out	0x08, r24	; 8
 248:	8b ef       	ldi	r24, 0xFB	; 251
 24a:	90 e0       	ldi	r25, 0x00	; 0
				PORTA=(0xFB >> j) | 0xF8;
 24c:	0a 8c       	ldd	r0, Y+26	; 0x1a
 24e:	02 c0       	rjmp	.+4      	; 0x254 <main+0x116>
 250:	95 95       	asr	r25
 252:	87 95       	ror	r24
 254:	0a 94       	dec	r0
 256:	e2 f7       	brpl	.-8      	; 0x250 <main+0x112>
 258:	88 6f       	ori	r24, 0xF8	; 248
 25a:	82 b9       	out	0x02, r24	; 2
 25c:	8f ed       	ldi	r24, 0xDF	; 223
 25e:	9e e2       	ldi	r25, 0x2E	; 46
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <main+0x122>
 264:	00 c0       	rjmp	.+0      	; 0x266 <main+0x128>
 266:	00 00       	nop
 268:	93 e0       	ldi	r25, 0x03	; 3
 26a:	c9 16       	cp	r12, r25
	while (1)
    {
		pot[0]=(ADC_read(PINF0)*5.0)/1024;			   // First float value is read from ADC input
		poti[0]=trunc(pot[0]);						   // First float value is truncated to integer
		
		for (j=0;j<nDigit;j++)
 26c:	d1 04       	cpc	r13, r1
 26e:	0c f0       	brlt	.+2      	; 0x272 <main+0x134>
 270:	89 cf       	rjmp	.-238    	; 0x184 <main+0x46>
 272:	ef ef       	ldi	r30, 0xFF	; 255
 274:	2e 1a       	sub	r2, r30
 276:	3e 0a       	sbc	r3, r30
 278:	ff ef       	ldi	r31, 0xFF	; 255
 27a:	cf 1a       	sub	r12, r31
 27c:	df 0a       	sbc	r13, r31
 27e:	8f ef       	ldi	r24, 0xFF	; 255
 280:	a8 1a       	sub	r10, r24
 282:	b8 0a       	sbc	r11, r24
 284:	3b 8e       	std	Y+27, r3	; 0x1b
 286:	2a 8e       	std	Y+26, r2	; 0x1a
 288:	8e 01       	movw	r16, r28
 28a:	0c 5f       	subi	r16, 0xFC	; 252
 28c:	1f 4f       	sbci	r17, 0xFF	; 255
 28e:	7e 01       	movw	r14, r28
 290:	92 e0       	ldi	r25, 0x02	; 2
 292:	e9 0e       	add	r14, r25
 294:	f1 1c       	adc	r15, r1
 296:	96 cf       	rjmp	.-212    	; 0x1c4 <main+0x86>

00000298 <__subsf3>:
 298:	50 58       	subi	r21, 0x80	; 128

0000029a <__addsf3>:
 29a:	bb 27       	eor	r27, r27
 29c:	aa 27       	eor	r26, r26
 29e:	0e d0       	rcall	.+28     	; 0x2bc <__addsf3x>
 2a0:	e0 c0       	rjmp	.+448    	; 0x462 <__fp_round>
 2a2:	d1 d0       	rcall	.+418    	; 0x446 <__fp_pscA>
 2a4:	30 f0       	brcs	.+12     	; 0x2b2 <__addsf3+0x18>
 2a6:	d6 d0       	rcall	.+428    	; 0x454 <__fp_pscB>
 2a8:	20 f0       	brcs	.+8      	; 0x2b2 <__addsf3+0x18>
 2aa:	31 f4       	brne	.+12     	; 0x2b8 <__addsf3+0x1e>
 2ac:	9f 3f       	cpi	r25, 0xFF	; 255
 2ae:	11 f4       	brne	.+4      	; 0x2b4 <__addsf3+0x1a>
 2b0:	1e f4       	brtc	.+6      	; 0x2b8 <__addsf3+0x1e>
 2b2:	c6 c0       	rjmp	.+396    	; 0x440 <__fp_nan>
 2b4:	0e f4       	brtc	.+2      	; 0x2b8 <__addsf3+0x1e>
 2b6:	e0 95       	com	r30
 2b8:	e7 fb       	bst	r30, 7
 2ba:	bc c0       	rjmp	.+376    	; 0x434 <__fp_inf>

000002bc <__addsf3x>:
 2bc:	e9 2f       	mov	r30, r25
 2be:	e2 d0       	rcall	.+452    	; 0x484 <__fp_split3>
 2c0:	80 f3       	brcs	.-32     	; 0x2a2 <__addsf3+0x8>
 2c2:	ba 17       	cp	r27, r26
 2c4:	62 07       	cpc	r22, r18
 2c6:	73 07       	cpc	r23, r19
 2c8:	84 07       	cpc	r24, r20
 2ca:	95 07       	cpc	r25, r21
 2cc:	18 f0       	brcs	.+6      	; 0x2d4 <__addsf3x+0x18>
 2ce:	71 f4       	brne	.+28     	; 0x2ec <__addsf3x+0x30>
 2d0:	9e f5       	brtc	.+102    	; 0x338 <__addsf3x+0x7c>
 2d2:	fa c0       	rjmp	.+500    	; 0x4c8 <__fp_zero>
 2d4:	0e f4       	brtc	.+2      	; 0x2d8 <__addsf3x+0x1c>
 2d6:	e0 95       	com	r30
 2d8:	0b 2e       	mov	r0, r27
 2da:	ba 2f       	mov	r27, r26
 2dc:	a0 2d       	mov	r26, r0
 2de:	0b 01       	movw	r0, r22
 2e0:	b9 01       	movw	r22, r18
 2e2:	90 01       	movw	r18, r0
 2e4:	0c 01       	movw	r0, r24
 2e6:	ca 01       	movw	r24, r20
 2e8:	a0 01       	movw	r20, r0
 2ea:	11 24       	eor	r1, r1
 2ec:	ff 27       	eor	r31, r31
 2ee:	59 1b       	sub	r21, r25
 2f0:	99 f0       	breq	.+38     	; 0x318 <__addsf3x+0x5c>
 2f2:	59 3f       	cpi	r21, 0xF9	; 249
 2f4:	50 f4       	brcc	.+20     	; 0x30a <__addsf3x+0x4e>
 2f6:	50 3e       	cpi	r21, 0xE0	; 224
 2f8:	68 f1       	brcs	.+90     	; 0x354 <__addsf3x+0x98>
 2fa:	1a 16       	cp	r1, r26
 2fc:	f0 40       	sbci	r31, 0x00	; 0
 2fe:	a2 2f       	mov	r26, r18
 300:	23 2f       	mov	r18, r19
 302:	34 2f       	mov	r19, r20
 304:	44 27       	eor	r20, r20
 306:	58 5f       	subi	r21, 0xF8	; 248
 308:	f3 cf       	rjmp	.-26     	; 0x2f0 <__addsf3x+0x34>
 30a:	46 95       	lsr	r20
 30c:	37 95       	ror	r19
 30e:	27 95       	ror	r18
 310:	a7 95       	ror	r26
 312:	f0 40       	sbci	r31, 0x00	; 0
 314:	53 95       	inc	r21
 316:	c9 f7       	brne	.-14     	; 0x30a <__addsf3x+0x4e>
 318:	7e f4       	brtc	.+30     	; 0x338 <__addsf3x+0x7c>
 31a:	1f 16       	cp	r1, r31
 31c:	ba 0b       	sbc	r27, r26
 31e:	62 0b       	sbc	r22, r18
 320:	73 0b       	sbc	r23, r19
 322:	84 0b       	sbc	r24, r20
 324:	ba f0       	brmi	.+46     	; 0x354 <__addsf3x+0x98>
 326:	91 50       	subi	r25, 0x01	; 1
 328:	a1 f0       	breq	.+40     	; 0x352 <__addsf3x+0x96>
 32a:	ff 0f       	add	r31, r31
 32c:	bb 1f       	adc	r27, r27
 32e:	66 1f       	adc	r22, r22
 330:	77 1f       	adc	r23, r23
 332:	88 1f       	adc	r24, r24
 334:	c2 f7       	brpl	.-16     	; 0x326 <__addsf3x+0x6a>
 336:	0e c0       	rjmp	.+28     	; 0x354 <__addsf3x+0x98>
 338:	ba 0f       	add	r27, r26
 33a:	62 1f       	adc	r22, r18
 33c:	73 1f       	adc	r23, r19
 33e:	84 1f       	adc	r24, r20
 340:	48 f4       	brcc	.+18     	; 0x354 <__addsf3x+0x98>
 342:	87 95       	ror	r24
 344:	77 95       	ror	r23
 346:	67 95       	ror	r22
 348:	b7 95       	ror	r27
 34a:	f7 95       	ror	r31
 34c:	9e 3f       	cpi	r25, 0xFE	; 254
 34e:	08 f0       	brcs	.+2      	; 0x352 <__addsf3x+0x96>
 350:	b3 cf       	rjmp	.-154    	; 0x2b8 <__addsf3+0x1e>
 352:	93 95       	inc	r25
 354:	88 0f       	add	r24, r24
 356:	08 f0       	brcs	.+2      	; 0x35a <__addsf3x+0x9e>
 358:	99 27       	eor	r25, r25
 35a:	ee 0f       	add	r30, r30
 35c:	97 95       	ror	r25
 35e:	87 95       	ror	r24
 360:	08 95       	ret

00000362 <__fixunssfsi>:
 362:	98 d0       	rcall	.+304    	; 0x494 <__fp_splitA>
 364:	88 f0       	brcs	.+34     	; 0x388 <__fixunssfsi+0x26>
 366:	9f 57       	subi	r25, 0x7F	; 127
 368:	90 f0       	brcs	.+36     	; 0x38e <__fixunssfsi+0x2c>
 36a:	b9 2f       	mov	r27, r25
 36c:	99 27       	eor	r25, r25
 36e:	b7 51       	subi	r27, 0x17	; 23
 370:	a0 f0       	brcs	.+40     	; 0x39a <__fixunssfsi+0x38>
 372:	d1 f0       	breq	.+52     	; 0x3a8 <__fixunssfsi+0x46>
 374:	66 0f       	add	r22, r22
 376:	77 1f       	adc	r23, r23
 378:	88 1f       	adc	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	1a f0       	brmi	.+6      	; 0x384 <__fixunssfsi+0x22>
 37e:	ba 95       	dec	r27
 380:	c9 f7       	brne	.-14     	; 0x374 <__fixunssfsi+0x12>
 382:	12 c0       	rjmp	.+36     	; 0x3a8 <__fixunssfsi+0x46>
 384:	b1 30       	cpi	r27, 0x01	; 1
 386:	81 f0       	breq	.+32     	; 0x3a8 <__fixunssfsi+0x46>
 388:	9f d0       	rcall	.+318    	; 0x4c8 <__fp_zero>
 38a:	b1 e0       	ldi	r27, 0x01	; 1
 38c:	08 95       	ret
 38e:	9c c0       	rjmp	.+312    	; 0x4c8 <__fp_zero>
 390:	67 2f       	mov	r22, r23
 392:	78 2f       	mov	r23, r24
 394:	88 27       	eor	r24, r24
 396:	b8 5f       	subi	r27, 0xF8	; 248
 398:	39 f0       	breq	.+14     	; 0x3a8 <__fixunssfsi+0x46>
 39a:	b9 3f       	cpi	r27, 0xF9	; 249
 39c:	cc f3       	brlt	.-14     	; 0x390 <__fixunssfsi+0x2e>
 39e:	86 95       	lsr	r24
 3a0:	77 95       	ror	r23
 3a2:	67 95       	ror	r22
 3a4:	b3 95       	inc	r27
 3a6:	d9 f7       	brne	.-10     	; 0x39e <__fixunssfsi+0x3c>
 3a8:	3e f4       	brtc	.+14     	; 0x3b8 <__fixunssfsi+0x56>
 3aa:	90 95       	com	r25
 3ac:	80 95       	com	r24
 3ae:	70 95       	com	r23
 3b0:	61 95       	neg	r22
 3b2:	7f 4f       	sbci	r23, 0xFF	; 255
 3b4:	8f 4f       	sbci	r24, 0xFF	; 255
 3b6:	9f 4f       	sbci	r25, 0xFF	; 255
 3b8:	08 95       	ret

000003ba <__floatunsisf>:
 3ba:	e8 94       	clt
 3bc:	09 c0       	rjmp	.+18     	; 0x3d0 <__floatsisf+0x12>

000003be <__floatsisf>:
 3be:	97 fb       	bst	r25, 7
 3c0:	3e f4       	brtc	.+14     	; 0x3d0 <__floatsisf+0x12>
 3c2:	90 95       	com	r25
 3c4:	80 95       	com	r24
 3c6:	70 95       	com	r23
 3c8:	61 95       	neg	r22
 3ca:	7f 4f       	sbci	r23, 0xFF	; 255
 3cc:	8f 4f       	sbci	r24, 0xFF	; 255
 3ce:	9f 4f       	sbci	r25, 0xFF	; 255
 3d0:	99 23       	and	r25, r25
 3d2:	a9 f0       	breq	.+42     	; 0x3fe <__floatsisf+0x40>
 3d4:	f9 2f       	mov	r31, r25
 3d6:	96 e9       	ldi	r25, 0x96	; 150
 3d8:	bb 27       	eor	r27, r27
 3da:	93 95       	inc	r25
 3dc:	f6 95       	lsr	r31
 3de:	87 95       	ror	r24
 3e0:	77 95       	ror	r23
 3e2:	67 95       	ror	r22
 3e4:	b7 95       	ror	r27
 3e6:	f1 11       	cpse	r31, r1
 3e8:	f8 cf       	rjmp	.-16     	; 0x3da <__floatsisf+0x1c>
 3ea:	fa f4       	brpl	.+62     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 3ec:	bb 0f       	add	r27, r27
 3ee:	11 f4       	brne	.+4      	; 0x3f4 <__floatsisf+0x36>
 3f0:	60 ff       	sbrs	r22, 0
 3f2:	1b c0       	rjmp	.+54     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 3f4:	6f 5f       	subi	r22, 0xFF	; 255
 3f6:	7f 4f       	sbci	r23, 0xFF	; 255
 3f8:	8f 4f       	sbci	r24, 0xFF	; 255
 3fa:	9f 4f       	sbci	r25, 0xFF	; 255
 3fc:	16 c0       	rjmp	.+44     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 3fe:	88 23       	and	r24, r24
 400:	11 f0       	breq	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 402:	96 e9       	ldi	r25, 0x96	; 150
 404:	11 c0       	rjmp	.+34     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 406:	77 23       	and	r23, r23
 408:	21 f0       	breq	.+8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 40a:	9e e8       	ldi	r25, 0x8E	; 142
 40c:	87 2f       	mov	r24, r23
 40e:	76 2f       	mov	r23, r22
 410:	05 c0       	rjmp	.+10     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 412:	66 23       	and	r22, r22
 414:	71 f0       	breq	.+28     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 416:	96 e8       	ldi	r25, 0x86	; 134
 418:	86 2f       	mov	r24, r22
 41a:	70 e0       	ldi	r23, 0x00	; 0
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	2a f0       	brmi	.+10     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 420:	9a 95       	dec	r25
 422:	66 0f       	add	r22, r22
 424:	77 1f       	adc	r23, r23
 426:	88 1f       	adc	r24, r24
 428:	da f7       	brpl	.-10     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 42a:	88 0f       	add	r24, r24
 42c:	96 95       	lsr	r25
 42e:	87 95       	ror	r24
 430:	97 f9       	bld	r25, 7
 432:	08 95       	ret

00000434 <__fp_inf>:
 434:	97 f9       	bld	r25, 7
 436:	9f 67       	ori	r25, 0x7F	; 127
 438:	80 e8       	ldi	r24, 0x80	; 128
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	60 e0       	ldi	r22, 0x00	; 0
 43e:	08 95       	ret

00000440 <__fp_nan>:
 440:	9f ef       	ldi	r25, 0xFF	; 255
 442:	80 ec       	ldi	r24, 0xC0	; 192
 444:	08 95       	ret

00000446 <__fp_pscA>:
 446:	00 24       	eor	r0, r0
 448:	0a 94       	dec	r0
 44a:	16 16       	cp	r1, r22
 44c:	17 06       	cpc	r1, r23
 44e:	18 06       	cpc	r1, r24
 450:	09 06       	cpc	r0, r25
 452:	08 95       	ret

00000454 <__fp_pscB>:
 454:	00 24       	eor	r0, r0
 456:	0a 94       	dec	r0
 458:	12 16       	cp	r1, r18
 45a:	13 06       	cpc	r1, r19
 45c:	14 06       	cpc	r1, r20
 45e:	05 06       	cpc	r0, r21
 460:	08 95       	ret

00000462 <__fp_round>:
 462:	09 2e       	mov	r0, r25
 464:	03 94       	inc	r0
 466:	00 0c       	add	r0, r0
 468:	11 f4       	brne	.+4      	; 0x46e <__fp_round+0xc>
 46a:	88 23       	and	r24, r24
 46c:	52 f0       	brmi	.+20     	; 0x482 <__fp_round+0x20>
 46e:	bb 0f       	add	r27, r27
 470:	40 f4       	brcc	.+16     	; 0x482 <__fp_round+0x20>
 472:	bf 2b       	or	r27, r31
 474:	11 f4       	brne	.+4      	; 0x47a <__fp_round+0x18>
 476:	60 ff       	sbrs	r22, 0
 478:	04 c0       	rjmp	.+8      	; 0x482 <__fp_round+0x20>
 47a:	6f 5f       	subi	r22, 0xFF	; 255
 47c:	7f 4f       	sbci	r23, 0xFF	; 255
 47e:	8f 4f       	sbci	r24, 0xFF	; 255
 480:	9f 4f       	sbci	r25, 0xFF	; 255
 482:	08 95       	ret

00000484 <__fp_split3>:
 484:	57 fd       	sbrc	r21, 7
 486:	90 58       	subi	r25, 0x80	; 128
 488:	44 0f       	add	r20, r20
 48a:	55 1f       	adc	r21, r21
 48c:	59 f0       	breq	.+22     	; 0x4a4 <__fp_splitA+0x10>
 48e:	5f 3f       	cpi	r21, 0xFF	; 255
 490:	71 f0       	breq	.+28     	; 0x4ae <__fp_splitA+0x1a>
 492:	47 95       	ror	r20

00000494 <__fp_splitA>:
 494:	88 0f       	add	r24, r24
 496:	97 fb       	bst	r25, 7
 498:	99 1f       	adc	r25, r25
 49a:	61 f0       	breq	.+24     	; 0x4b4 <__fp_splitA+0x20>
 49c:	9f 3f       	cpi	r25, 0xFF	; 255
 49e:	79 f0       	breq	.+30     	; 0x4be <__fp_splitA+0x2a>
 4a0:	87 95       	ror	r24
 4a2:	08 95       	ret
 4a4:	12 16       	cp	r1, r18
 4a6:	13 06       	cpc	r1, r19
 4a8:	14 06       	cpc	r1, r20
 4aa:	55 1f       	adc	r21, r21
 4ac:	f2 cf       	rjmp	.-28     	; 0x492 <__fp_split3+0xe>
 4ae:	46 95       	lsr	r20
 4b0:	f1 df       	rcall	.-30     	; 0x494 <__fp_splitA>
 4b2:	08 c0       	rjmp	.+16     	; 0x4c4 <__fp_splitA+0x30>
 4b4:	16 16       	cp	r1, r22
 4b6:	17 06       	cpc	r1, r23
 4b8:	18 06       	cpc	r1, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	f1 cf       	rjmp	.-30     	; 0x4a0 <__fp_splitA+0xc>
 4be:	86 95       	lsr	r24
 4c0:	71 05       	cpc	r23, r1
 4c2:	61 05       	cpc	r22, r1
 4c4:	08 94       	sec
 4c6:	08 95       	ret

000004c8 <__fp_zero>:
 4c8:	e8 94       	clt

000004ca <__fp_szero>:
 4ca:	bb 27       	eor	r27, r27
 4cc:	66 27       	eor	r22, r22
 4ce:	77 27       	eor	r23, r23
 4d0:	cb 01       	movw	r24, r22
 4d2:	97 f9       	bld	r25, 7
 4d4:	08 95       	ret

000004d6 <__mulsf3>:
 4d6:	0b d0       	rcall	.+22     	; 0x4ee <__mulsf3x>
 4d8:	c4 cf       	rjmp	.-120    	; 0x462 <__fp_round>
 4da:	b5 df       	rcall	.-150    	; 0x446 <__fp_pscA>
 4dc:	28 f0       	brcs	.+10     	; 0x4e8 <__mulsf3+0x12>
 4de:	ba df       	rcall	.-140    	; 0x454 <__fp_pscB>
 4e0:	18 f0       	brcs	.+6      	; 0x4e8 <__mulsf3+0x12>
 4e2:	95 23       	and	r25, r21
 4e4:	09 f0       	breq	.+2      	; 0x4e8 <__mulsf3+0x12>
 4e6:	a6 cf       	rjmp	.-180    	; 0x434 <__fp_inf>
 4e8:	ab cf       	rjmp	.-170    	; 0x440 <__fp_nan>
 4ea:	11 24       	eor	r1, r1
 4ec:	ee cf       	rjmp	.-36     	; 0x4ca <__fp_szero>

000004ee <__mulsf3x>:
 4ee:	ca df       	rcall	.-108    	; 0x484 <__fp_split3>
 4f0:	a0 f3       	brcs	.-24     	; 0x4da <__mulsf3+0x4>

000004f2 <__mulsf3_pse>:
 4f2:	95 9f       	mul	r25, r21
 4f4:	d1 f3       	breq	.-12     	; 0x4ea <__mulsf3+0x14>
 4f6:	95 0f       	add	r25, r21
 4f8:	50 e0       	ldi	r21, 0x00	; 0
 4fa:	55 1f       	adc	r21, r21
 4fc:	62 9f       	mul	r22, r18
 4fe:	f0 01       	movw	r30, r0
 500:	72 9f       	mul	r23, r18
 502:	bb 27       	eor	r27, r27
 504:	f0 0d       	add	r31, r0
 506:	b1 1d       	adc	r27, r1
 508:	63 9f       	mul	r22, r19
 50a:	aa 27       	eor	r26, r26
 50c:	f0 0d       	add	r31, r0
 50e:	b1 1d       	adc	r27, r1
 510:	aa 1f       	adc	r26, r26
 512:	64 9f       	mul	r22, r20
 514:	66 27       	eor	r22, r22
 516:	b0 0d       	add	r27, r0
 518:	a1 1d       	adc	r26, r1
 51a:	66 1f       	adc	r22, r22
 51c:	82 9f       	mul	r24, r18
 51e:	22 27       	eor	r18, r18
 520:	b0 0d       	add	r27, r0
 522:	a1 1d       	adc	r26, r1
 524:	62 1f       	adc	r22, r18
 526:	73 9f       	mul	r23, r19
 528:	b0 0d       	add	r27, r0
 52a:	a1 1d       	adc	r26, r1
 52c:	62 1f       	adc	r22, r18
 52e:	83 9f       	mul	r24, r19
 530:	a0 0d       	add	r26, r0
 532:	61 1d       	adc	r22, r1
 534:	22 1f       	adc	r18, r18
 536:	74 9f       	mul	r23, r20
 538:	33 27       	eor	r19, r19
 53a:	a0 0d       	add	r26, r0
 53c:	61 1d       	adc	r22, r1
 53e:	23 1f       	adc	r18, r19
 540:	84 9f       	mul	r24, r20
 542:	60 0d       	add	r22, r0
 544:	21 1d       	adc	r18, r1
 546:	82 2f       	mov	r24, r18
 548:	76 2f       	mov	r23, r22
 54a:	6a 2f       	mov	r22, r26
 54c:	11 24       	eor	r1, r1
 54e:	9f 57       	subi	r25, 0x7F	; 127
 550:	50 40       	sbci	r21, 0x00	; 0
 552:	8a f0       	brmi	.+34     	; 0x576 <__mulsf3_pse+0x84>
 554:	e1 f0       	breq	.+56     	; 0x58e <__mulsf3_pse+0x9c>
 556:	88 23       	and	r24, r24
 558:	4a f0       	brmi	.+18     	; 0x56c <__mulsf3_pse+0x7a>
 55a:	ee 0f       	add	r30, r30
 55c:	ff 1f       	adc	r31, r31
 55e:	bb 1f       	adc	r27, r27
 560:	66 1f       	adc	r22, r22
 562:	77 1f       	adc	r23, r23
 564:	88 1f       	adc	r24, r24
 566:	91 50       	subi	r25, 0x01	; 1
 568:	50 40       	sbci	r21, 0x00	; 0
 56a:	a9 f7       	brne	.-22     	; 0x556 <__mulsf3_pse+0x64>
 56c:	9e 3f       	cpi	r25, 0xFE	; 254
 56e:	51 05       	cpc	r21, r1
 570:	70 f0       	brcs	.+28     	; 0x58e <__mulsf3_pse+0x9c>
 572:	60 cf       	rjmp	.-320    	; 0x434 <__fp_inf>
 574:	aa cf       	rjmp	.-172    	; 0x4ca <__fp_szero>
 576:	5f 3f       	cpi	r21, 0xFF	; 255
 578:	ec f3       	brlt	.-6      	; 0x574 <__mulsf3_pse+0x82>
 57a:	98 3e       	cpi	r25, 0xE8	; 232
 57c:	dc f3       	brlt	.-10     	; 0x574 <__mulsf3_pse+0x82>
 57e:	86 95       	lsr	r24
 580:	77 95       	ror	r23
 582:	67 95       	ror	r22
 584:	b7 95       	ror	r27
 586:	f7 95       	ror	r31
 588:	e7 95       	ror	r30
 58a:	9f 5f       	subi	r25, 0xFF	; 255
 58c:	c1 f7       	brne	.-16     	; 0x57e <__mulsf3_pse+0x8c>
 58e:	fe 2b       	or	r31, r30
 590:	88 0f       	add	r24, r24
 592:	91 1d       	adc	r25, r1
 594:	96 95       	lsr	r25
 596:	87 95       	ror	r24
 598:	97 f9       	bld	r25, 7
 59a:	08 95       	ret

0000059c <trunc>:
 59c:	2f d0       	rcall	.+94     	; 0x5fc <__fp_trunc>
 59e:	20 f0       	brcs	.+8      	; 0x5a8 <trunc+0xc>
 5a0:	9f 37       	cpi	r25, 0x7F	; 127
 5a2:	08 f4       	brcc	.+2      	; 0x5a6 <trunc+0xa>
 5a4:	92 cf       	rjmp	.-220    	; 0x4ca <__fp_szero>
 5a6:	01 c0       	rjmp	.+2      	; 0x5aa <__fp_mintl>
 5a8:	1b c0       	rjmp	.+54     	; 0x5e0 <__fp_mpack>

000005aa <__fp_mintl>:
 5aa:	88 23       	and	r24, r24
 5ac:	71 f4       	brne	.+28     	; 0x5ca <__fp_mintl+0x20>
 5ae:	77 23       	and	r23, r23
 5b0:	21 f0       	breq	.+8      	; 0x5ba <__fp_mintl+0x10>
 5b2:	98 50       	subi	r25, 0x08	; 8
 5b4:	87 2b       	or	r24, r23
 5b6:	76 2f       	mov	r23, r22
 5b8:	07 c0       	rjmp	.+14     	; 0x5c8 <__fp_mintl+0x1e>
 5ba:	66 23       	and	r22, r22
 5bc:	11 f4       	brne	.+4      	; 0x5c2 <__fp_mintl+0x18>
 5be:	99 27       	eor	r25, r25
 5c0:	0d c0       	rjmp	.+26     	; 0x5dc <__fp_mintl+0x32>
 5c2:	90 51       	subi	r25, 0x10	; 16
 5c4:	86 2b       	or	r24, r22
 5c6:	70 e0       	ldi	r23, 0x00	; 0
 5c8:	60 e0       	ldi	r22, 0x00	; 0
 5ca:	2a f0       	brmi	.+10     	; 0x5d6 <__fp_mintl+0x2c>
 5cc:	9a 95       	dec	r25
 5ce:	66 0f       	add	r22, r22
 5d0:	77 1f       	adc	r23, r23
 5d2:	88 1f       	adc	r24, r24
 5d4:	da f7       	brpl	.-10     	; 0x5cc <__fp_mintl+0x22>
 5d6:	88 0f       	add	r24, r24
 5d8:	96 95       	lsr	r25
 5da:	87 95       	ror	r24
 5dc:	97 f9       	bld	r25, 7
 5de:	08 95       	ret

000005e0 <__fp_mpack>:
 5e0:	9f 3f       	cpi	r25, 0xFF	; 255
 5e2:	31 f0       	breq	.+12     	; 0x5f0 <__fp_mpack_finite+0xc>

000005e4 <__fp_mpack_finite>:
 5e4:	91 50       	subi	r25, 0x01	; 1
 5e6:	20 f4       	brcc	.+8      	; 0x5f0 <__fp_mpack_finite+0xc>
 5e8:	87 95       	ror	r24
 5ea:	77 95       	ror	r23
 5ec:	67 95       	ror	r22
 5ee:	b7 95       	ror	r27
 5f0:	88 0f       	add	r24, r24
 5f2:	91 1d       	adc	r25, r1
 5f4:	96 95       	lsr	r25
 5f6:	87 95       	ror	r24
 5f8:	97 f9       	bld	r25, 7
 5fa:	08 95       	ret

000005fc <__fp_trunc>:
 5fc:	4b df       	rcall	.-362    	; 0x494 <__fp_splitA>
 5fe:	a0 f0       	brcs	.+40     	; 0x628 <__fp_trunc+0x2c>
 600:	be e7       	ldi	r27, 0x7E	; 126
 602:	b9 17       	cp	r27, r25
 604:	88 f4       	brcc	.+34     	; 0x628 <__fp_trunc+0x2c>
 606:	bb 27       	eor	r27, r27
 608:	9f 38       	cpi	r25, 0x8F	; 143
 60a:	60 f4       	brcc	.+24     	; 0x624 <__fp_trunc+0x28>
 60c:	16 16       	cp	r1, r22
 60e:	b1 1d       	adc	r27, r1
 610:	67 2f       	mov	r22, r23
 612:	78 2f       	mov	r23, r24
 614:	88 27       	eor	r24, r24
 616:	98 5f       	subi	r25, 0xF8	; 248
 618:	f7 cf       	rjmp	.-18     	; 0x608 <__fp_trunc+0xc>
 61a:	86 95       	lsr	r24
 61c:	77 95       	ror	r23
 61e:	67 95       	ror	r22
 620:	b1 1d       	adc	r27, r1
 622:	93 95       	inc	r25
 624:	96 39       	cpi	r25, 0x96	; 150
 626:	c8 f3       	brcs	.-14     	; 0x61a <__fp_trunc+0x1e>
 628:	08 95       	ret

0000062a <_exit>:
 62a:	f8 94       	cli

0000062c <__stop_program>:
 62c:	ff cf       	rjmp	.-2      	; 0x62c <__stop_program>
