
Practica2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  00000976  00000a0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000976  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800210  00800210  00000a1a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f28  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d25  00000000  00000000  000019fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046d  00000000  00000000  00002721  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00002b90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f1  00000000  00000000  00002c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000022b  00000000  00000000  00003245  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00003470  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	73 c1       	rjmp	.+742    	; 0x2fc <__vector_5>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e7       	ldi	r30, 0x76	; 118
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 31       	cpi	r26, 0x10	; 16
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e1       	ldi	r26, 0x10	; 16
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 31       	cpi	r26, 0x18	; 24
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	3c d0       	rcall	.+120    	; 0x198 <main>
 120:	28 c4       	rjmp	.+2128   	; 0x972 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <ADC_read>:


unsigned int ADC_read(unsigned char chnl)
{
	chnl=chnl & 0b00000111;								// Select adc channel between 0 to 7
	ADMUX=0x40;											// Channel A0 selected
 124:	80 e4       	ldi	r24, 0x40	; 64
 126:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA|=(1<<ADSC);									// Start conversion
 12a:	ea e7       	ldi	r30, 0x7A	; 122
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	80 64       	ori	r24, 0x40	; 64
 132:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));						// Wait for ADIF conversion complete return
 134:	80 81       	ld	r24, Z
 136:	84 ff       	sbrs	r24, 4
 138:	fd cf       	rjmp	.-6      	; 0x134 <ADC_read+0x10>
	ADCSRA|=(1<<ADIF);									// Clear ADIF when conversion complete by writing 1
 13a:	ea e7       	ldi	r30, 0x7A	; 122
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	80 61       	ori	r24, 0x10	; 16
 142:	80 83       	st	Z, r24
	return (ADC);										// Return calculated ADC value
 144:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
 148:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
}														
 14c:	08 95       	ret

0000014e <ADC_Init>:
// Source: https://circuitdigest.com/microcontroller-projects/how-to-use-adc-in-avr-microcontroller-atmega16
 
void ADC_Init() {
	ADMUX=(1<<REFS0);									// Selecting internal reference voltage
 14e:	80 e4       	ldi	r24, 0x40	; 64
 150:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);  // Enable ADC also set Prescaler as 128
 154:	87 e8       	ldi	r24, 0x87	; 135
 156:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
 15a:	08 95       	ret

0000015c <Interruptions_Init>:
}

void Interruptions_Init() {
	EICRB = 0b00000000;									// External interruption low logic level in INT4
 15c:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
	EIMSK = 0b00010000;									// External interruption enabled in INT4
 160:	80 e1       	ldi	r24, 0x10	; 16
 162:	8d bb       	out	0x1d, r24	; 29
	EIFR  = 0b00000000;									// There is no interruption flag enabled when program executed for first time
 164:	1c ba       	out	0x1c, r1	; 28
	sei();
 166:	78 94       	sei
 168:	08 95       	ret

0000016a <Init_System>:
}

void Init_System() {
	/*------1 for outputs and 0 for inputs-----*/

	DDRC=0b11111111;									// 7 segments of display are setup as output pins
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	87 b9       	out	0x07, r24	; 7
	DDRA=0b00000111;									// 3 digital GND are setup as outputs to multiplex which digit is shown in display
 16e:	87 e0       	ldi	r24, 0x07	; 7
 170:	81 b9       	out	0x01, r24	; 1
														// PA3 and PA4 are used to stop and start the program	
	DDRF=0b11111110;									// Potenciometer analog input	
 172:	8e ef       	ldi	r24, 0xFE	; 254
 174:	80 bb       	out	0x10, r24	; 16
	
	ADC_Init();											// ADC pins are initialized
 176:	eb df       	rcall	.-42     	; 0x14e <ADC_Init>
	Interruptions_Init();								// Interruptions are enabled
 178:	f1 df       	rcall	.-30     	; 0x15c <Interruptions_Init>
 17a:	8c e0       	ldi	r24, 0x0C	; 12
	pot = malloc(sizeof(*pot)*nDigit); 
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	d8 d2       	rcall	.+1456   	; 0x730 <malloc>
 180:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <__data_end+0x1>
 184:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <__data_end>
 188:	83 e0       	ldi	r24, 0x03	; 3
	poti = malloc(sizeof(*poti)*nDigit);			    // Source: @YamikaDesu who gave me the idea
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	d1 d2       	rcall	.+1442   	; 0x730 <malloc>
 18e:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <poti+0x1>
 192:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <poti>
 196:	08 95       	ret

00000198 <main>:
 198:	e8 df       	rcall	.-48     	; 0x16a <Init_System>
 19a:	c0 91 10 02 	lds	r28, 0x0210	; 0x800210 <__data_end>
int main(void)
{
	int j,k;
	uint8_t* pDisplayCC=&DisplayCC;						// pDisplayCC is initialized to point to the address of DisplayCC
	Init_System();
	pot[0]=(ADC_read(PINF0)*5.0)/1024;					// First float value is read from ADC input
 19e:	d0 91 11 02 	lds	r29, 0x0211	; 0x800211 <__data_end+0x1>
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	bf df       	rcall	.-130    	; 0x124 <ADC_read>
 1a6:	bc 01       	movw	r22, r24
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	89 d1       	rcall	.+786    	; 0x4c0 <__floatunsisf>
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	40 ea       	ldi	r20, 0xA0	; 160
 1b4:	50 e4       	ldi	r21, 0x40	; 64
 1b6:	12 d2       	rcall	.+1060   	; 0x5dc <__mulsf3>
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	40 e8       	ldi	r20, 0x80	; 128
 1be:	5a e3       	ldi	r21, 0x3A	; 58
 1c0:	0d d2       	rcall	.+1050   	; 0x5dc <__mulsf3>
 1c2:	68 83       	st	Y, r22
 1c4:	79 83       	std	Y+1, r23	; 0x01
 1c6:	8a 83       	std	Y+2, r24	; 0x02
 1c8:	9b 83       	std	Y+3, r25	; 0x03
	poti[0]=trunc(pot[0]);								// First float value is truncated to integer
 1ca:	c0 91 12 02 	lds	r28, 0x0212	; 0x800212 <poti>
 1ce:	d0 91 13 02 	lds	r29, 0x0213	; 0x800213 <poti+0x1>
 1d2:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <__data_end>
 1d6:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <__data_end+0x1>
 1da:	60 81       	ld	r22, Z
 1dc:	71 81       	ldd	r23, Z+1	; 0x01
 1de:	82 81       	ldd	r24, Z+2	; 0x02
 1e0:	93 81       	ldd	r25, Z+3	; 0x03
 1e2:	5f d2       	rcall	.+1214   	; 0x6a2 <trunc>
 1e4:	41 d1       	rcall	.+642    	; 0x468 <__fixunssfsi>
 1e6:	68 83       	st	Y, r22
				_delay_ms(3);
			}
			else 
			{											// Rest of digits
				PORTC=*(pDisplayCC+poti[j]) & 0x7F;
				PORTA=(0xFB >> j) | 0xF8;
 1e8:	0f 2e       	mov	r0, r31
 1ea:	fb ef       	ldi	r31, 0xFB	; 251
 1ec:	4f 2e       	mov	r4, r31
 1ee:	51 2c       	mov	r5, r1
 1f0:	f0 2d       	mov	r31, r0
	pot = malloc(sizeof(*pot)*nDigit); 
	poti = malloc(sizeof(*poti)*nDigit);			    // Source: @YamikaDesu who gave me the idea
}

int main(void)
{
 1f2:	cc 24       	eor	r12, r12
 1f4:	c3 94       	inc	r12
 1f6:	d1 2c       	mov	r13, r1
 1f8:	61 2c       	mov	r6, r1
 1fa:	71 2c       	mov	r7, r1
 1fc:	79 c0       	rjmp	.+242    	; 0x2f0 <main+0x158>
	while(1) {
		for (j=0;j<nDigit;j++)
		{
			for (k=1;k<nDigit;k++)						// The following algorithm initializes all values to be shown on display converting each decimal in integer
			{
				pot[k]=10*(pot[k-1]-trunc(pot[k-1]));
 1fe:	c0 91 10 02 	lds	r28, 0x0210	; 0x800210 <__data_end>
 202:	d0 91 11 02 	lds	r29, 0x0211	; 0x800211 <__data_end+0x1>
 206:	7c 01       	movw	r14, r24
 208:	24 e0       	ldi	r18, 0x04	; 4
 20a:	e2 0e       	add	r14, r18
 20c:	f1 1c       	adc	r15, r1
 20e:	fe 01       	movw	r30, r28
 210:	e8 0f       	add	r30, r24
 212:	f9 1f       	adc	r31, r25
 214:	80 80       	ld	r8, Z
 216:	91 80       	ldd	r9, Z+1	; 0x01
 218:	a2 80       	ldd	r10, Z+2	; 0x02
 21a:	b3 80       	ldd	r11, Z+3	; 0x03
 21c:	c5 01       	movw	r24, r10
 21e:	b4 01       	movw	r22, r8
 220:	40 d2       	rcall	.+1152   	; 0x6a2 <trunc>
 222:	9b 01       	movw	r18, r22
 224:	ac 01       	movw	r20, r24
 226:	ce 0d       	add	r28, r14
 228:	df 1d       	adc	r29, r15
 22a:	c5 01       	movw	r24, r10
 22c:	b4 01       	movw	r22, r8
 22e:	b7 d0       	rcall	.+366    	; 0x39e <__subsf3>
 230:	20 e0       	ldi	r18, 0x00	; 0
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	40 e2       	ldi	r20, 0x20	; 32
 236:	51 e4       	ldi	r21, 0x41	; 65
 238:	d1 d1       	rcall	.+930    	; 0x5dc <__mulsf3>
 23a:	68 83       	st	Y, r22
 23c:	79 83       	std	Y+1, r23	; 0x01
 23e:	8a 83       	std	Y+2, r24	; 0x02
 240:	9b 83       	std	Y+3, r25	; 0x03
				poti[k]=trunc(pot[k]);
 242:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <__data_end>
 246:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <__data_end+0x1>
 24a:	ee 0d       	add	r30, r14
 24c:	ff 1d       	adc	r31, r15
 24e:	60 81       	ld	r22, Z
 250:	71 81       	ldd	r23, Z+1	; 0x01
 252:	82 81       	ldd	r24, Z+2	; 0x02
 254:	93 81       	ldd	r25, Z+3	; 0x03
 256:	25 d2       	rcall	.+1098   	; 0x6a2 <trunc>
 258:	c0 91 12 02 	lds	r28, 0x0212	; 0x800212 <poti>
 25c:	d0 91 13 02 	lds	r29, 0x0213	; 0x800213 <poti+0x1>
 260:	c0 0f       	add	r28, r16
 262:	d1 1f       	adc	r29, r17
 264:	01 d1       	rcall	.+514    	; 0x468 <__fixunssfsi>
 266:	68 83       	st	Y, r22
	poti[0]=trunc(pot[0]);								// First float value is truncated to integer
	
	while(1) {
		for (j=0;j<nDigit;j++)
		{
			for (k=1;k<nDigit;k++)						// The following algorithm initializes all values to be shown on display converting each decimal in integer
 268:	0f 5f       	subi	r16, 0xFF	; 255
 26a:	1f 4f       	sbci	r17, 0xFF	; 255
 26c:	c7 01       	movw	r24, r14
 26e:	03 30       	cpi	r16, 0x03	; 3
 270:	11 05       	cpc	r17, r1
 272:	09 f0       	breq	.+2      	; 0x276 <main+0xde>
 274:	c4 cf       	rjmp	.-120    	; 0x1fe <main+0x66>
			{
				pot[k]=10*(pot[k-1]-trunc(pot[k-1]));
				poti[k]=trunc(pot[k]);
			}
			
			if (j==0)									// First digit
 276:	21 14       	cp	r2, r1
 278:	31 04       	cpc	r3, r1
 27a:	a1 f4       	brne	.+40     	; 0x2a4 <main+0x10c>
			{
				PORTC=*(pDisplayCC+poti[j]) | 0x80;
 27c:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <poti>
 280:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <poti+0x1>
 284:	e0 81       	ld	r30, Z
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	ea 5f       	subi	r30, 0xFA	; 250
 28a:	fd 4f       	sbci	r31, 0xFD	; 253
 28c:	80 81       	ld	r24, Z
 28e:	80 68       	ori	r24, 0x80	; 128
 290:	88 b9       	out	0x08, r24	; 8
				PORTA=0xFB;
 292:	8b ef       	ldi	r24, 0xFB	; 251
 294:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 296:	8f ed       	ldi	r24, 0xDF	; 223
 298:	9e e2       	ldi	r25, 0x2E	; 46
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <main+0x102>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <main+0x108>
 2a0:	00 00       	nop
 2a2:	20 c0       	rjmp	.+64     	; 0x2e4 <main+0x14c>
				_delay_ms(3);
			}
			else 
			{											// Rest of digits
				PORTC=*(pDisplayCC+poti[j]) & 0x7F;
 2a4:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <poti>
 2a8:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <poti+0x1>
 2ac:	e6 0d       	add	r30, r6
 2ae:	f7 1d       	adc	r31, r7
 2b0:	e0 81       	ld	r30, Z
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	ea 5f       	subi	r30, 0xFA	; 250
 2b6:	fd 4f       	sbci	r31, 0xFD	; 253
 2b8:	80 81       	ld	r24, Z
 2ba:	8f 77       	andi	r24, 0x7F	; 127
 2bc:	88 b9       	out	0x08, r24	; 8
				PORTA=(0xFB >> j) | 0xF8;
 2be:	c2 01       	movw	r24, r4
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <main+0x12e>
 2c2:	95 95       	asr	r25
 2c4:	87 95       	ror	r24
 2c6:	2a 94       	dec	r2
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <main+0x12a>
 2ca:	88 6f       	ori	r24, 0xF8	; 248
 2cc:	82 b9       	out	0x02, r24	; 2
 2ce:	8f ed       	ldi	r24, 0xDF	; 223
 2d0:	9e e2       	ldi	r25, 0x2E	; 46
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <main+0x13a>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <main+0x140>
 2d8:	00 00       	nop
	Init_System();
	pot[0]=(ADC_read(PINF0)*5.0)/1024;					// First float value is read from ADC input
	poti[0]=trunc(pot[0]);								// First float value is truncated to integer
	
	while(1) {
		for (j=0;j<nDigit;j++)
 2da:	93 e0       	ldi	r25, 0x03	; 3
 2dc:	c9 16       	cp	r12, r25
 2de:	d1 04       	cpc	r13, r1
 2e0:	0c f0       	brlt	.+2      	; 0x2e4 <main+0x14c>
 2e2:	87 cf       	rjmp	.-242    	; 0x1f2 <main+0x5a>
 2e4:	2f ef       	ldi	r18, 0xFF	; 255
 2e6:	62 1a       	sub	r6, r18
 2e8:	72 0a       	sbc	r7, r18
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
 2ec:	c8 1a       	sub	r12, r24
 2ee:	d8 0a       	sbc	r13, r24
 2f0:	13 01       	movw	r2, r6
	pot = malloc(sizeof(*pot)*nDigit); 
	poti = malloc(sizeof(*poti)*nDigit);			    // Source: @YamikaDesu who gave me the idea
}

int main(void)
{
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	01 e0       	ldi	r16, 0x01	; 1
 2f8:	10 e0       	ldi	r17, 0x00	; 0
 2fa:	81 cf       	rjmp	.-254    	; 0x1fe <main+0x66>

000002fc <__vector_5>:
			}
		}												
	}													// Program being interrupted by INT4
}

ISR(INT4_vect) {
 2fc:	1f 92       	push	r1
 2fe:	0f 92       	push	r0
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	0f 92       	push	r0
 304:	11 24       	eor	r1, r1
 306:	0b b6       	in	r0, 0x3b	; 59
 308:	0f 92       	push	r0
 30a:	2f 93       	push	r18
 30c:	3f 93       	push	r19
 30e:	4f 93       	push	r20
 310:	5f 93       	push	r21
 312:	6f 93       	push	r22
 314:	7f 93       	push	r23
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
 31a:	af 93       	push	r26
 31c:	bf 93       	push	r27
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	ef 93       	push	r30
 324:	ff 93       	push	r31
	pot[0]=(ADC_read(PINF0)*5.0)/1024;					// First float value is read from ADC input
 326:	c0 91 10 02 	lds	r28, 0x0210	; 0x800210 <__data_end>
 32a:	d0 91 11 02 	lds	r29, 0x0211	; 0x800211 <__data_end+0x1>
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	f9 de       	rcall	.-526    	; 0x124 <ADC_read>
 332:	bc 01       	movw	r22, r24
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	c3 d0       	rcall	.+390    	; 0x4c0 <__floatunsisf>
 33a:	20 e0       	ldi	r18, 0x00	; 0
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	40 ea       	ldi	r20, 0xA0	; 160
 340:	50 e4       	ldi	r21, 0x40	; 64
 342:	4c d1       	rcall	.+664    	; 0x5dc <__mulsf3>
 344:	20 e0       	ldi	r18, 0x00	; 0
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	40 e8       	ldi	r20, 0x80	; 128
 34a:	5a e3       	ldi	r21, 0x3A	; 58
 34c:	47 d1       	rcall	.+654    	; 0x5dc <__mulsf3>
 34e:	68 83       	st	Y, r22
 350:	79 83       	std	Y+1, r23	; 0x01
 352:	8a 83       	std	Y+2, r24	; 0x02
 354:	9b 83       	std	Y+3, r25	; 0x03
	poti[0]=trunc(pot[0]);								// First float value is truncated to integer
 356:	c0 91 12 02 	lds	r28, 0x0212	; 0x800212 <poti>
 35a:	d0 91 13 02 	lds	r29, 0x0213	; 0x800213 <poti+0x1>
 35e:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <__data_end>
 362:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <__data_end+0x1>
 366:	60 81       	ld	r22, Z
 368:	71 81       	ldd	r23, Z+1	; 0x01
 36a:	82 81       	ldd	r24, Z+2	; 0x02
 36c:	93 81       	ldd	r25, Z+3	; 0x03
 36e:	99 d1       	rcall	.+818    	; 0x6a2 <trunc>
 370:	7b d0       	rcall	.+246    	; 0x468 <__fixunssfsi>
 372:	68 83       	st	Y, r22
 374:	ff 91       	pop	r31
 376:	ef 91       	pop	r30
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	bf 91       	pop	r27
 37e:	af 91       	pop	r26
 380:	9f 91       	pop	r25
 382:	8f 91       	pop	r24
 384:	7f 91       	pop	r23
 386:	6f 91       	pop	r22
 388:	5f 91       	pop	r21
 38a:	4f 91       	pop	r20
 38c:	3f 91       	pop	r19
 38e:	2f 91       	pop	r18
 390:	0f 90       	pop	r0
 392:	0b be       	out	0x3b, r0	; 59
 394:	0f 90       	pop	r0
 396:	0f be       	out	0x3f, r0	; 63
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

0000039e <__subsf3>:
 39e:	50 58       	subi	r21, 0x80	; 128

000003a0 <__addsf3>:
 3a0:	bb 27       	eor	r27, r27
 3a2:	aa 27       	eor	r26, r26
 3a4:	0e d0       	rcall	.+28     	; 0x3c2 <__addsf3x>
 3a6:	e0 c0       	rjmp	.+448    	; 0x568 <__fp_round>
 3a8:	d1 d0       	rcall	.+418    	; 0x54c <__fp_pscA>
 3aa:	30 f0       	brcs	.+12     	; 0x3b8 <__addsf3+0x18>
 3ac:	d6 d0       	rcall	.+428    	; 0x55a <__fp_pscB>
 3ae:	20 f0       	brcs	.+8      	; 0x3b8 <__addsf3+0x18>
 3b0:	31 f4       	brne	.+12     	; 0x3be <__addsf3+0x1e>
 3b2:	9f 3f       	cpi	r25, 0xFF	; 255
 3b4:	11 f4       	brne	.+4      	; 0x3ba <__addsf3+0x1a>
 3b6:	1e f4       	brtc	.+6      	; 0x3be <__addsf3+0x1e>
 3b8:	c6 c0       	rjmp	.+396    	; 0x546 <__fp_nan>
 3ba:	0e f4       	brtc	.+2      	; 0x3be <__addsf3+0x1e>
 3bc:	e0 95       	com	r30
 3be:	e7 fb       	bst	r30, 7
 3c0:	bc c0       	rjmp	.+376    	; 0x53a <__fp_inf>

000003c2 <__addsf3x>:
 3c2:	e9 2f       	mov	r30, r25
 3c4:	e2 d0       	rcall	.+452    	; 0x58a <__fp_split3>
 3c6:	80 f3       	brcs	.-32     	; 0x3a8 <__addsf3+0x8>
 3c8:	ba 17       	cp	r27, r26
 3ca:	62 07       	cpc	r22, r18
 3cc:	73 07       	cpc	r23, r19
 3ce:	84 07       	cpc	r24, r20
 3d0:	95 07       	cpc	r25, r21
 3d2:	18 f0       	brcs	.+6      	; 0x3da <__addsf3x+0x18>
 3d4:	71 f4       	brne	.+28     	; 0x3f2 <__addsf3x+0x30>
 3d6:	9e f5       	brtc	.+102    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 3d8:	fa c0       	rjmp	.+500    	; 0x5ce <__fp_zero>
 3da:	0e f4       	brtc	.+2      	; 0x3de <__addsf3x+0x1c>
 3dc:	e0 95       	com	r30
 3de:	0b 2e       	mov	r0, r27
 3e0:	ba 2f       	mov	r27, r26
 3e2:	a0 2d       	mov	r26, r0
 3e4:	0b 01       	movw	r0, r22
 3e6:	b9 01       	movw	r22, r18
 3e8:	90 01       	movw	r18, r0
 3ea:	0c 01       	movw	r0, r24
 3ec:	ca 01       	movw	r24, r20
 3ee:	a0 01       	movw	r20, r0
 3f0:	11 24       	eor	r1, r1
 3f2:	ff 27       	eor	r31, r31
 3f4:	59 1b       	sub	r21, r25
 3f6:	99 f0       	breq	.+38     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3f8:	59 3f       	cpi	r21, 0xF9	; 249
 3fa:	50 f4       	brcc	.+20     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3fc:	50 3e       	cpi	r21, 0xE0	; 224
 3fe:	68 f1       	brcs	.+90     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 400:	1a 16       	cp	r1, r26
 402:	f0 40       	sbci	r31, 0x00	; 0
 404:	a2 2f       	mov	r26, r18
 406:	23 2f       	mov	r18, r19
 408:	34 2f       	mov	r19, r20
 40a:	44 27       	eor	r20, r20
 40c:	58 5f       	subi	r21, 0xF8	; 248
 40e:	f3 cf       	rjmp	.-26     	; 0x3f6 <__addsf3x+0x34>
 410:	46 95       	lsr	r20
 412:	37 95       	ror	r19
 414:	27 95       	ror	r18
 416:	a7 95       	ror	r26
 418:	f0 40       	sbci	r31, 0x00	; 0
 41a:	53 95       	inc	r21
 41c:	c9 f7       	brne	.-14     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 41e:	7e f4       	brtc	.+30     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 420:	1f 16       	cp	r1, r31
 422:	ba 0b       	sbc	r27, r26
 424:	62 0b       	sbc	r22, r18
 426:	73 0b       	sbc	r23, r19
 428:	84 0b       	sbc	r24, r20
 42a:	ba f0       	brmi	.+46     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 42c:	91 50       	subi	r25, 0x01	; 1
 42e:	a1 f0       	breq	.+40     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 430:	ff 0f       	add	r31, r31
 432:	bb 1f       	adc	r27, r27
 434:	66 1f       	adc	r22, r22
 436:	77 1f       	adc	r23, r23
 438:	88 1f       	adc	r24, r24
 43a:	c2 f7       	brpl	.-16     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 43c:	0e c0       	rjmp	.+28     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 43e:	ba 0f       	add	r27, r26
 440:	62 1f       	adc	r22, r18
 442:	73 1f       	adc	r23, r19
 444:	84 1f       	adc	r24, r20
 446:	48 f4       	brcc	.+18     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 448:	87 95       	ror	r24
 44a:	77 95       	ror	r23
 44c:	67 95       	ror	r22
 44e:	b7 95       	ror	r27
 450:	f7 95       	ror	r31
 452:	9e 3f       	cpi	r25, 0xFE	; 254
 454:	08 f0       	brcs	.+2      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 456:	b3 cf       	rjmp	.-154    	; 0x3be <__addsf3+0x1e>
 458:	93 95       	inc	r25
 45a:	88 0f       	add	r24, r24
 45c:	08 f0       	brcs	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 45e:	99 27       	eor	r25, r25
 460:	ee 0f       	add	r30, r30
 462:	97 95       	ror	r25
 464:	87 95       	ror	r24
 466:	08 95       	ret

00000468 <__fixunssfsi>:
 468:	98 d0       	rcall	.+304    	; 0x59a <__fp_splitA>
 46a:	88 f0       	brcs	.+34     	; 0x48e <__fixunssfsi+0x26>
 46c:	9f 57       	subi	r25, 0x7F	; 127
 46e:	90 f0       	brcs	.+36     	; 0x494 <__fixunssfsi+0x2c>
 470:	b9 2f       	mov	r27, r25
 472:	99 27       	eor	r25, r25
 474:	b7 51       	subi	r27, 0x17	; 23
 476:	a0 f0       	brcs	.+40     	; 0x4a0 <__fixunssfsi+0x38>
 478:	d1 f0       	breq	.+52     	; 0x4ae <__fixunssfsi+0x46>
 47a:	66 0f       	add	r22, r22
 47c:	77 1f       	adc	r23, r23
 47e:	88 1f       	adc	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	1a f0       	brmi	.+6      	; 0x48a <__fixunssfsi+0x22>
 484:	ba 95       	dec	r27
 486:	c9 f7       	brne	.-14     	; 0x47a <__fixunssfsi+0x12>
 488:	12 c0       	rjmp	.+36     	; 0x4ae <__fixunssfsi+0x46>
 48a:	b1 30       	cpi	r27, 0x01	; 1
 48c:	81 f0       	breq	.+32     	; 0x4ae <__fixunssfsi+0x46>
 48e:	9f d0       	rcall	.+318    	; 0x5ce <__fp_zero>
 490:	b1 e0       	ldi	r27, 0x01	; 1
 492:	08 95       	ret
 494:	9c c0       	rjmp	.+312    	; 0x5ce <__fp_zero>
 496:	67 2f       	mov	r22, r23
 498:	78 2f       	mov	r23, r24
 49a:	88 27       	eor	r24, r24
 49c:	b8 5f       	subi	r27, 0xF8	; 248
 49e:	39 f0       	breq	.+14     	; 0x4ae <__fixunssfsi+0x46>
 4a0:	b9 3f       	cpi	r27, 0xF9	; 249
 4a2:	cc f3       	brlt	.-14     	; 0x496 <__fixunssfsi+0x2e>
 4a4:	86 95       	lsr	r24
 4a6:	77 95       	ror	r23
 4a8:	67 95       	ror	r22
 4aa:	b3 95       	inc	r27
 4ac:	d9 f7       	brne	.-10     	; 0x4a4 <__fixunssfsi+0x3c>
 4ae:	3e f4       	brtc	.+14     	; 0x4be <__fixunssfsi+0x56>
 4b0:	90 95       	com	r25
 4b2:	80 95       	com	r24
 4b4:	70 95       	com	r23
 4b6:	61 95       	neg	r22
 4b8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ba:	8f 4f       	sbci	r24, 0xFF	; 255
 4bc:	9f 4f       	sbci	r25, 0xFF	; 255
 4be:	08 95       	ret

000004c0 <__floatunsisf>:
 4c0:	e8 94       	clt
 4c2:	09 c0       	rjmp	.+18     	; 0x4d6 <__floatsisf+0x12>

000004c4 <__floatsisf>:
 4c4:	97 fb       	bst	r25, 7
 4c6:	3e f4       	brtc	.+14     	; 0x4d6 <__floatsisf+0x12>
 4c8:	90 95       	com	r25
 4ca:	80 95       	com	r24
 4cc:	70 95       	com	r23
 4ce:	61 95       	neg	r22
 4d0:	7f 4f       	sbci	r23, 0xFF	; 255
 4d2:	8f 4f       	sbci	r24, 0xFF	; 255
 4d4:	9f 4f       	sbci	r25, 0xFF	; 255
 4d6:	99 23       	and	r25, r25
 4d8:	a9 f0       	breq	.+42     	; 0x504 <__floatsisf+0x40>
 4da:	f9 2f       	mov	r31, r25
 4dc:	96 e9       	ldi	r25, 0x96	; 150
 4de:	bb 27       	eor	r27, r27
 4e0:	93 95       	inc	r25
 4e2:	f6 95       	lsr	r31
 4e4:	87 95       	ror	r24
 4e6:	77 95       	ror	r23
 4e8:	67 95       	ror	r22
 4ea:	b7 95       	ror	r27
 4ec:	f1 11       	cpse	r31, r1
 4ee:	f8 cf       	rjmp	.-16     	; 0x4e0 <__floatsisf+0x1c>
 4f0:	fa f4       	brpl	.+62     	; 0x530 <__floatsisf+0x6c>
 4f2:	bb 0f       	add	r27, r27
 4f4:	11 f4       	brne	.+4      	; 0x4fa <__floatsisf+0x36>
 4f6:	60 ff       	sbrs	r22, 0
 4f8:	1b c0       	rjmp	.+54     	; 0x530 <__floatsisf+0x6c>
 4fa:	6f 5f       	subi	r22, 0xFF	; 255
 4fc:	7f 4f       	sbci	r23, 0xFF	; 255
 4fe:	8f 4f       	sbci	r24, 0xFF	; 255
 500:	9f 4f       	sbci	r25, 0xFF	; 255
 502:	16 c0       	rjmp	.+44     	; 0x530 <__floatsisf+0x6c>
 504:	88 23       	and	r24, r24
 506:	11 f0       	breq	.+4      	; 0x50c <__floatsisf+0x48>
 508:	96 e9       	ldi	r25, 0x96	; 150
 50a:	11 c0       	rjmp	.+34     	; 0x52e <__floatsisf+0x6a>
 50c:	77 23       	and	r23, r23
 50e:	21 f0       	breq	.+8      	; 0x518 <__floatsisf+0x54>
 510:	9e e8       	ldi	r25, 0x8E	; 142
 512:	87 2f       	mov	r24, r23
 514:	76 2f       	mov	r23, r22
 516:	05 c0       	rjmp	.+10     	; 0x522 <__floatsisf+0x5e>
 518:	66 23       	and	r22, r22
 51a:	71 f0       	breq	.+28     	; 0x538 <__floatsisf+0x74>
 51c:	96 e8       	ldi	r25, 0x86	; 134
 51e:	86 2f       	mov	r24, r22
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	2a f0       	brmi	.+10     	; 0x530 <__floatsisf+0x6c>
 526:	9a 95       	dec	r25
 528:	66 0f       	add	r22, r22
 52a:	77 1f       	adc	r23, r23
 52c:	88 1f       	adc	r24, r24
 52e:	da f7       	brpl	.-10     	; 0x526 <__floatsisf+0x62>
 530:	88 0f       	add	r24, r24
 532:	96 95       	lsr	r25
 534:	87 95       	ror	r24
 536:	97 f9       	bld	r25, 7
 538:	08 95       	ret

0000053a <__fp_inf>:
 53a:	97 f9       	bld	r25, 7
 53c:	9f 67       	ori	r25, 0x7F	; 127
 53e:	80 e8       	ldi	r24, 0x80	; 128
 540:	70 e0       	ldi	r23, 0x00	; 0
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	08 95       	ret

00000546 <__fp_nan>:
 546:	9f ef       	ldi	r25, 0xFF	; 255
 548:	80 ec       	ldi	r24, 0xC0	; 192
 54a:	08 95       	ret

0000054c <__fp_pscA>:
 54c:	00 24       	eor	r0, r0
 54e:	0a 94       	dec	r0
 550:	16 16       	cp	r1, r22
 552:	17 06       	cpc	r1, r23
 554:	18 06       	cpc	r1, r24
 556:	09 06       	cpc	r0, r25
 558:	08 95       	ret

0000055a <__fp_pscB>:
 55a:	00 24       	eor	r0, r0
 55c:	0a 94       	dec	r0
 55e:	12 16       	cp	r1, r18
 560:	13 06       	cpc	r1, r19
 562:	14 06       	cpc	r1, r20
 564:	05 06       	cpc	r0, r21
 566:	08 95       	ret

00000568 <__fp_round>:
 568:	09 2e       	mov	r0, r25
 56a:	03 94       	inc	r0
 56c:	00 0c       	add	r0, r0
 56e:	11 f4       	brne	.+4      	; 0x574 <__fp_round+0xc>
 570:	88 23       	and	r24, r24
 572:	52 f0       	brmi	.+20     	; 0x588 <__fp_round+0x20>
 574:	bb 0f       	add	r27, r27
 576:	40 f4       	brcc	.+16     	; 0x588 <__fp_round+0x20>
 578:	bf 2b       	or	r27, r31
 57a:	11 f4       	brne	.+4      	; 0x580 <__fp_round+0x18>
 57c:	60 ff       	sbrs	r22, 0
 57e:	04 c0       	rjmp	.+8      	; 0x588 <__fp_round+0x20>
 580:	6f 5f       	subi	r22, 0xFF	; 255
 582:	7f 4f       	sbci	r23, 0xFF	; 255
 584:	8f 4f       	sbci	r24, 0xFF	; 255
 586:	9f 4f       	sbci	r25, 0xFF	; 255
 588:	08 95       	ret

0000058a <__fp_split3>:
 58a:	57 fd       	sbrc	r21, 7
 58c:	90 58       	subi	r25, 0x80	; 128
 58e:	44 0f       	add	r20, r20
 590:	55 1f       	adc	r21, r21
 592:	59 f0       	breq	.+22     	; 0x5aa <__fp_splitA+0x10>
 594:	5f 3f       	cpi	r21, 0xFF	; 255
 596:	71 f0       	breq	.+28     	; 0x5b4 <__fp_splitA+0x1a>
 598:	47 95       	ror	r20

0000059a <__fp_splitA>:
 59a:	88 0f       	add	r24, r24
 59c:	97 fb       	bst	r25, 7
 59e:	99 1f       	adc	r25, r25
 5a0:	61 f0       	breq	.+24     	; 0x5ba <__fp_splitA+0x20>
 5a2:	9f 3f       	cpi	r25, 0xFF	; 255
 5a4:	79 f0       	breq	.+30     	; 0x5c4 <__fp_splitA+0x2a>
 5a6:	87 95       	ror	r24
 5a8:	08 95       	ret
 5aa:	12 16       	cp	r1, r18
 5ac:	13 06       	cpc	r1, r19
 5ae:	14 06       	cpc	r1, r20
 5b0:	55 1f       	adc	r21, r21
 5b2:	f2 cf       	rjmp	.-28     	; 0x598 <__fp_split3+0xe>
 5b4:	46 95       	lsr	r20
 5b6:	f1 df       	rcall	.-30     	; 0x59a <__fp_splitA>
 5b8:	08 c0       	rjmp	.+16     	; 0x5ca <__fp_splitA+0x30>
 5ba:	16 16       	cp	r1, r22
 5bc:	17 06       	cpc	r1, r23
 5be:	18 06       	cpc	r1, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	f1 cf       	rjmp	.-30     	; 0x5a6 <__fp_splitA+0xc>
 5c4:	86 95       	lsr	r24
 5c6:	71 05       	cpc	r23, r1
 5c8:	61 05       	cpc	r22, r1
 5ca:	08 94       	sec
 5cc:	08 95       	ret

000005ce <__fp_zero>:
 5ce:	e8 94       	clt

000005d0 <__fp_szero>:
 5d0:	bb 27       	eor	r27, r27
 5d2:	66 27       	eor	r22, r22
 5d4:	77 27       	eor	r23, r23
 5d6:	cb 01       	movw	r24, r22
 5d8:	97 f9       	bld	r25, 7
 5da:	08 95       	ret

000005dc <__mulsf3>:
 5dc:	0b d0       	rcall	.+22     	; 0x5f4 <__mulsf3x>
 5de:	c4 cf       	rjmp	.-120    	; 0x568 <__fp_round>
 5e0:	b5 df       	rcall	.-150    	; 0x54c <__fp_pscA>
 5e2:	28 f0       	brcs	.+10     	; 0x5ee <__mulsf3+0x12>
 5e4:	ba df       	rcall	.-140    	; 0x55a <__fp_pscB>
 5e6:	18 f0       	brcs	.+6      	; 0x5ee <__mulsf3+0x12>
 5e8:	95 23       	and	r25, r21
 5ea:	09 f0       	breq	.+2      	; 0x5ee <__mulsf3+0x12>
 5ec:	a6 cf       	rjmp	.-180    	; 0x53a <__fp_inf>
 5ee:	ab cf       	rjmp	.-170    	; 0x546 <__fp_nan>
 5f0:	11 24       	eor	r1, r1
 5f2:	ee cf       	rjmp	.-36     	; 0x5d0 <__fp_szero>

000005f4 <__mulsf3x>:
 5f4:	ca df       	rcall	.-108    	; 0x58a <__fp_split3>
 5f6:	a0 f3       	brcs	.-24     	; 0x5e0 <__mulsf3+0x4>

000005f8 <__mulsf3_pse>:
 5f8:	95 9f       	mul	r25, r21
 5fa:	d1 f3       	breq	.-12     	; 0x5f0 <__mulsf3+0x14>
 5fc:	95 0f       	add	r25, r21
 5fe:	50 e0       	ldi	r21, 0x00	; 0
 600:	55 1f       	adc	r21, r21
 602:	62 9f       	mul	r22, r18
 604:	f0 01       	movw	r30, r0
 606:	72 9f       	mul	r23, r18
 608:	bb 27       	eor	r27, r27
 60a:	f0 0d       	add	r31, r0
 60c:	b1 1d       	adc	r27, r1
 60e:	63 9f       	mul	r22, r19
 610:	aa 27       	eor	r26, r26
 612:	f0 0d       	add	r31, r0
 614:	b1 1d       	adc	r27, r1
 616:	aa 1f       	adc	r26, r26
 618:	64 9f       	mul	r22, r20
 61a:	66 27       	eor	r22, r22
 61c:	b0 0d       	add	r27, r0
 61e:	a1 1d       	adc	r26, r1
 620:	66 1f       	adc	r22, r22
 622:	82 9f       	mul	r24, r18
 624:	22 27       	eor	r18, r18
 626:	b0 0d       	add	r27, r0
 628:	a1 1d       	adc	r26, r1
 62a:	62 1f       	adc	r22, r18
 62c:	73 9f       	mul	r23, r19
 62e:	b0 0d       	add	r27, r0
 630:	a1 1d       	adc	r26, r1
 632:	62 1f       	adc	r22, r18
 634:	83 9f       	mul	r24, r19
 636:	a0 0d       	add	r26, r0
 638:	61 1d       	adc	r22, r1
 63a:	22 1f       	adc	r18, r18
 63c:	74 9f       	mul	r23, r20
 63e:	33 27       	eor	r19, r19
 640:	a0 0d       	add	r26, r0
 642:	61 1d       	adc	r22, r1
 644:	23 1f       	adc	r18, r19
 646:	84 9f       	mul	r24, r20
 648:	60 0d       	add	r22, r0
 64a:	21 1d       	adc	r18, r1
 64c:	82 2f       	mov	r24, r18
 64e:	76 2f       	mov	r23, r22
 650:	6a 2f       	mov	r22, r26
 652:	11 24       	eor	r1, r1
 654:	9f 57       	subi	r25, 0x7F	; 127
 656:	50 40       	sbci	r21, 0x00	; 0
 658:	8a f0       	brmi	.+34     	; 0x67c <__mulsf3_pse+0x84>
 65a:	e1 f0       	breq	.+56     	; 0x694 <__mulsf3_pse+0x9c>
 65c:	88 23       	and	r24, r24
 65e:	4a f0       	brmi	.+18     	; 0x672 <__mulsf3_pse+0x7a>
 660:	ee 0f       	add	r30, r30
 662:	ff 1f       	adc	r31, r31
 664:	bb 1f       	adc	r27, r27
 666:	66 1f       	adc	r22, r22
 668:	77 1f       	adc	r23, r23
 66a:	88 1f       	adc	r24, r24
 66c:	91 50       	subi	r25, 0x01	; 1
 66e:	50 40       	sbci	r21, 0x00	; 0
 670:	a9 f7       	brne	.-22     	; 0x65c <__mulsf3_pse+0x64>
 672:	9e 3f       	cpi	r25, 0xFE	; 254
 674:	51 05       	cpc	r21, r1
 676:	70 f0       	brcs	.+28     	; 0x694 <__mulsf3_pse+0x9c>
 678:	60 cf       	rjmp	.-320    	; 0x53a <__fp_inf>
 67a:	aa cf       	rjmp	.-172    	; 0x5d0 <__fp_szero>
 67c:	5f 3f       	cpi	r21, 0xFF	; 255
 67e:	ec f3       	brlt	.-6      	; 0x67a <__mulsf3_pse+0x82>
 680:	98 3e       	cpi	r25, 0xE8	; 232
 682:	dc f3       	brlt	.-10     	; 0x67a <__mulsf3_pse+0x82>
 684:	86 95       	lsr	r24
 686:	77 95       	ror	r23
 688:	67 95       	ror	r22
 68a:	b7 95       	ror	r27
 68c:	f7 95       	ror	r31
 68e:	e7 95       	ror	r30
 690:	9f 5f       	subi	r25, 0xFF	; 255
 692:	c1 f7       	brne	.-16     	; 0x684 <__mulsf3_pse+0x8c>
 694:	fe 2b       	or	r31, r30
 696:	88 0f       	add	r24, r24
 698:	91 1d       	adc	r25, r1
 69a:	96 95       	lsr	r25
 69c:	87 95       	ror	r24
 69e:	97 f9       	bld	r25, 7
 6a0:	08 95       	ret

000006a2 <trunc>:
 6a2:	2f d0       	rcall	.+94     	; 0x702 <__fp_trunc>
 6a4:	20 f0       	brcs	.+8      	; 0x6ae <trunc+0xc>
 6a6:	9f 37       	cpi	r25, 0x7F	; 127
 6a8:	08 f4       	brcc	.+2      	; 0x6ac <trunc+0xa>
 6aa:	92 cf       	rjmp	.-220    	; 0x5d0 <__fp_szero>
 6ac:	01 c0       	rjmp	.+2      	; 0x6b0 <__fp_mintl>
 6ae:	1b c0       	rjmp	.+54     	; 0x6e6 <__fp_mpack>

000006b0 <__fp_mintl>:
 6b0:	88 23       	and	r24, r24
 6b2:	71 f4       	brne	.+28     	; 0x6d0 <__fp_mintl+0x20>
 6b4:	77 23       	and	r23, r23
 6b6:	21 f0       	breq	.+8      	; 0x6c0 <__fp_mintl+0x10>
 6b8:	98 50       	subi	r25, 0x08	; 8
 6ba:	87 2b       	or	r24, r23
 6bc:	76 2f       	mov	r23, r22
 6be:	07 c0       	rjmp	.+14     	; 0x6ce <__fp_mintl+0x1e>
 6c0:	66 23       	and	r22, r22
 6c2:	11 f4       	brne	.+4      	; 0x6c8 <__fp_mintl+0x18>
 6c4:	99 27       	eor	r25, r25
 6c6:	0d c0       	rjmp	.+26     	; 0x6e2 <__fp_mintl+0x32>
 6c8:	90 51       	subi	r25, 0x10	; 16
 6ca:	86 2b       	or	r24, r22
 6cc:	70 e0       	ldi	r23, 0x00	; 0
 6ce:	60 e0       	ldi	r22, 0x00	; 0
 6d0:	2a f0       	brmi	.+10     	; 0x6dc <__fp_mintl+0x2c>
 6d2:	9a 95       	dec	r25
 6d4:	66 0f       	add	r22, r22
 6d6:	77 1f       	adc	r23, r23
 6d8:	88 1f       	adc	r24, r24
 6da:	da f7       	brpl	.-10     	; 0x6d2 <__fp_mintl+0x22>
 6dc:	88 0f       	add	r24, r24
 6de:	96 95       	lsr	r25
 6e0:	87 95       	ror	r24
 6e2:	97 f9       	bld	r25, 7
 6e4:	08 95       	ret

000006e6 <__fp_mpack>:
 6e6:	9f 3f       	cpi	r25, 0xFF	; 255
 6e8:	31 f0       	breq	.+12     	; 0x6f6 <__fp_mpack_finite+0xc>

000006ea <__fp_mpack_finite>:
 6ea:	91 50       	subi	r25, 0x01	; 1
 6ec:	20 f4       	brcc	.+8      	; 0x6f6 <__fp_mpack_finite+0xc>
 6ee:	87 95       	ror	r24
 6f0:	77 95       	ror	r23
 6f2:	67 95       	ror	r22
 6f4:	b7 95       	ror	r27
 6f6:	88 0f       	add	r24, r24
 6f8:	91 1d       	adc	r25, r1
 6fa:	96 95       	lsr	r25
 6fc:	87 95       	ror	r24
 6fe:	97 f9       	bld	r25, 7
 700:	08 95       	ret

00000702 <__fp_trunc>:
 702:	4b df       	rcall	.-362    	; 0x59a <__fp_splitA>
 704:	a0 f0       	brcs	.+40     	; 0x72e <__fp_trunc+0x2c>
 706:	be e7       	ldi	r27, 0x7E	; 126
 708:	b9 17       	cp	r27, r25
 70a:	88 f4       	brcc	.+34     	; 0x72e <__fp_trunc+0x2c>
 70c:	bb 27       	eor	r27, r27
 70e:	9f 38       	cpi	r25, 0x8F	; 143
 710:	60 f4       	brcc	.+24     	; 0x72a <__fp_trunc+0x28>
 712:	16 16       	cp	r1, r22
 714:	b1 1d       	adc	r27, r1
 716:	67 2f       	mov	r22, r23
 718:	78 2f       	mov	r23, r24
 71a:	88 27       	eor	r24, r24
 71c:	98 5f       	subi	r25, 0xF8	; 248
 71e:	f7 cf       	rjmp	.-18     	; 0x70e <__fp_trunc+0xc>
 720:	86 95       	lsr	r24
 722:	77 95       	ror	r23
 724:	67 95       	ror	r22
 726:	b1 1d       	adc	r27, r1
 728:	93 95       	inc	r25
 72a:	96 39       	cpi	r25, 0x96	; 150
 72c:	c8 f3       	brcs	.-14     	; 0x720 <__fp_trunc+0x1e>
 72e:	08 95       	ret

00000730 <malloc>:
 730:	0f 93       	push	r16
 732:	1f 93       	push	r17
 734:	cf 93       	push	r28
 736:	df 93       	push	r29
 738:	82 30       	cpi	r24, 0x02	; 2
 73a:	91 05       	cpc	r25, r1
 73c:	10 f4       	brcc	.+4      	; 0x742 <malloc+0x12>
 73e:	82 e0       	ldi	r24, 0x02	; 2
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <__flp>
 746:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <__flp+0x1>
 74a:	20 e0       	ldi	r18, 0x00	; 0
 74c:	30 e0       	ldi	r19, 0x00	; 0
 74e:	a0 e0       	ldi	r26, 0x00	; 0
 750:	b0 e0       	ldi	r27, 0x00	; 0
 752:	30 97       	sbiw	r30, 0x00	; 0
 754:	19 f1       	breq	.+70     	; 0x79c <malloc+0x6c>
 756:	40 81       	ld	r20, Z
 758:	51 81       	ldd	r21, Z+1	; 0x01
 75a:	02 81       	ldd	r16, Z+2	; 0x02
 75c:	13 81       	ldd	r17, Z+3	; 0x03
 75e:	48 17       	cp	r20, r24
 760:	59 07       	cpc	r21, r25
 762:	c8 f0       	brcs	.+50     	; 0x796 <malloc+0x66>
 764:	84 17       	cp	r24, r20
 766:	95 07       	cpc	r25, r21
 768:	69 f4       	brne	.+26     	; 0x784 <malloc+0x54>
 76a:	10 97       	sbiw	r26, 0x00	; 0
 76c:	31 f0       	breq	.+12     	; 0x77a <malloc+0x4a>
 76e:	12 96       	adiw	r26, 0x02	; 2
 770:	0c 93       	st	X, r16
 772:	12 97       	sbiw	r26, 0x02	; 2
 774:	13 96       	adiw	r26, 0x03	; 3
 776:	1c 93       	st	X, r17
 778:	27 c0       	rjmp	.+78     	; 0x7c8 <malloc+0x98>
 77a:	00 93 16 02 	sts	0x0216, r16	; 0x800216 <__flp>
 77e:	10 93 17 02 	sts	0x0217, r17	; 0x800217 <__flp+0x1>
 782:	22 c0       	rjmp	.+68     	; 0x7c8 <malloc+0x98>
 784:	21 15       	cp	r18, r1
 786:	31 05       	cpc	r19, r1
 788:	19 f0       	breq	.+6      	; 0x790 <malloc+0x60>
 78a:	42 17       	cp	r20, r18
 78c:	53 07       	cpc	r21, r19
 78e:	18 f4       	brcc	.+6      	; 0x796 <malloc+0x66>
 790:	9a 01       	movw	r18, r20
 792:	bd 01       	movw	r22, r26
 794:	ef 01       	movw	r28, r30
 796:	df 01       	movw	r26, r30
 798:	f8 01       	movw	r30, r16
 79a:	db cf       	rjmp	.-74     	; 0x752 <malloc+0x22>
 79c:	21 15       	cp	r18, r1
 79e:	31 05       	cpc	r19, r1
 7a0:	f9 f0       	breq	.+62     	; 0x7e0 <malloc+0xb0>
 7a2:	28 1b       	sub	r18, r24
 7a4:	39 0b       	sbc	r19, r25
 7a6:	24 30       	cpi	r18, 0x04	; 4
 7a8:	31 05       	cpc	r19, r1
 7aa:	80 f4       	brcc	.+32     	; 0x7cc <malloc+0x9c>
 7ac:	8a 81       	ldd	r24, Y+2	; 0x02
 7ae:	9b 81       	ldd	r25, Y+3	; 0x03
 7b0:	61 15       	cp	r22, r1
 7b2:	71 05       	cpc	r23, r1
 7b4:	21 f0       	breq	.+8      	; 0x7be <malloc+0x8e>
 7b6:	fb 01       	movw	r30, r22
 7b8:	93 83       	std	Z+3, r25	; 0x03
 7ba:	82 83       	std	Z+2, r24	; 0x02
 7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <malloc+0x96>
 7be:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <__flp+0x1>
 7c2:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <__flp>
 7c6:	fe 01       	movw	r30, r28
 7c8:	32 96       	adiw	r30, 0x02	; 2
 7ca:	44 c0       	rjmp	.+136    	; 0x854 <malloc+0x124>
 7cc:	fe 01       	movw	r30, r28
 7ce:	e2 0f       	add	r30, r18
 7d0:	f3 1f       	adc	r31, r19
 7d2:	81 93       	st	Z+, r24
 7d4:	91 93       	st	Z+, r25
 7d6:	22 50       	subi	r18, 0x02	; 2
 7d8:	31 09       	sbc	r19, r1
 7da:	39 83       	std	Y+1, r19	; 0x01
 7dc:	28 83       	st	Y, r18
 7de:	3a c0       	rjmp	.+116    	; 0x854 <malloc+0x124>
 7e0:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <__brkval>
 7e4:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <__brkval+0x1>
 7e8:	23 2b       	or	r18, r19
 7ea:	41 f4       	brne	.+16     	; 0x7fc <malloc+0xcc>
 7ec:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 7f0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 7f4:	30 93 15 02 	sts	0x0215, r19	; 0x800215 <__brkval+0x1>
 7f8:	20 93 14 02 	sts	0x0214, r18	; 0x800214 <__brkval>
 7fc:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 800:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 804:	21 15       	cp	r18, r1
 806:	31 05       	cpc	r19, r1
 808:	41 f4       	brne	.+16     	; 0x81a <malloc+0xea>
 80a:	2d b7       	in	r18, 0x3d	; 61
 80c:	3e b7       	in	r19, 0x3e	; 62
 80e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 812:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 816:	24 1b       	sub	r18, r20
 818:	35 0b       	sbc	r19, r21
 81a:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <__brkval>
 81e:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <__brkval+0x1>
 822:	e2 17       	cp	r30, r18
 824:	f3 07       	cpc	r31, r19
 826:	a0 f4       	brcc	.+40     	; 0x850 <malloc+0x120>
 828:	2e 1b       	sub	r18, r30
 82a:	3f 0b       	sbc	r19, r31
 82c:	28 17       	cp	r18, r24
 82e:	39 07       	cpc	r19, r25
 830:	78 f0       	brcs	.+30     	; 0x850 <malloc+0x120>
 832:	ac 01       	movw	r20, r24
 834:	4e 5f       	subi	r20, 0xFE	; 254
 836:	5f 4f       	sbci	r21, 0xFF	; 255
 838:	24 17       	cp	r18, r20
 83a:	35 07       	cpc	r19, r21
 83c:	48 f0       	brcs	.+18     	; 0x850 <malloc+0x120>
 83e:	4e 0f       	add	r20, r30
 840:	5f 1f       	adc	r21, r31
 842:	50 93 15 02 	sts	0x0215, r21	; 0x800215 <__brkval+0x1>
 846:	40 93 14 02 	sts	0x0214, r20	; 0x800214 <__brkval>
 84a:	81 93       	st	Z+, r24
 84c:	91 93       	st	Z+, r25
 84e:	02 c0       	rjmp	.+4      	; 0x854 <malloc+0x124>
 850:	e0 e0       	ldi	r30, 0x00	; 0
 852:	f0 e0       	ldi	r31, 0x00	; 0
 854:	cf 01       	movw	r24, r30
 856:	df 91       	pop	r29
 858:	cf 91       	pop	r28
 85a:	1f 91       	pop	r17
 85c:	0f 91       	pop	r16
 85e:	08 95       	ret

00000860 <free>:
 860:	cf 93       	push	r28
 862:	df 93       	push	r29
 864:	00 97       	sbiw	r24, 0x00	; 0
 866:	09 f4       	brne	.+2      	; 0x86a <free+0xa>
 868:	81 c0       	rjmp	.+258    	; 0x96c <free+0x10c>
 86a:	fc 01       	movw	r30, r24
 86c:	32 97       	sbiw	r30, 0x02	; 2
 86e:	13 82       	std	Z+3, r1	; 0x03
 870:	12 82       	std	Z+2, r1	; 0x02
 872:	a0 91 16 02 	lds	r26, 0x0216	; 0x800216 <__flp>
 876:	b0 91 17 02 	lds	r27, 0x0217	; 0x800217 <__flp+0x1>
 87a:	10 97       	sbiw	r26, 0x00	; 0
 87c:	81 f4       	brne	.+32     	; 0x89e <free+0x3e>
 87e:	20 81       	ld	r18, Z
 880:	31 81       	ldd	r19, Z+1	; 0x01
 882:	82 0f       	add	r24, r18
 884:	93 1f       	adc	r25, r19
 886:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <__brkval>
 88a:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <__brkval+0x1>
 88e:	28 17       	cp	r18, r24
 890:	39 07       	cpc	r19, r25
 892:	51 f5       	brne	.+84     	; 0x8e8 <free+0x88>
 894:	f0 93 15 02 	sts	0x0215, r31	; 0x800215 <__brkval+0x1>
 898:	e0 93 14 02 	sts	0x0214, r30	; 0x800214 <__brkval>
 89c:	67 c0       	rjmp	.+206    	; 0x96c <free+0x10c>
 89e:	ed 01       	movw	r28, r26
 8a0:	20 e0       	ldi	r18, 0x00	; 0
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	ce 17       	cp	r28, r30
 8a6:	df 07       	cpc	r29, r31
 8a8:	40 f4       	brcc	.+16     	; 0x8ba <free+0x5a>
 8aa:	4a 81       	ldd	r20, Y+2	; 0x02
 8ac:	5b 81       	ldd	r21, Y+3	; 0x03
 8ae:	9e 01       	movw	r18, r28
 8b0:	41 15       	cp	r20, r1
 8b2:	51 05       	cpc	r21, r1
 8b4:	f1 f0       	breq	.+60     	; 0x8f2 <free+0x92>
 8b6:	ea 01       	movw	r28, r20
 8b8:	f5 cf       	rjmp	.-22     	; 0x8a4 <free+0x44>
 8ba:	d3 83       	std	Z+3, r29	; 0x03
 8bc:	c2 83       	std	Z+2, r28	; 0x02
 8be:	40 81       	ld	r20, Z
 8c0:	51 81       	ldd	r21, Z+1	; 0x01
 8c2:	84 0f       	add	r24, r20
 8c4:	95 1f       	adc	r25, r21
 8c6:	c8 17       	cp	r28, r24
 8c8:	d9 07       	cpc	r29, r25
 8ca:	59 f4       	brne	.+22     	; 0x8e2 <free+0x82>
 8cc:	88 81       	ld	r24, Y
 8ce:	99 81       	ldd	r25, Y+1	; 0x01
 8d0:	84 0f       	add	r24, r20
 8d2:	95 1f       	adc	r25, r21
 8d4:	02 96       	adiw	r24, 0x02	; 2
 8d6:	91 83       	std	Z+1, r25	; 0x01
 8d8:	80 83       	st	Z, r24
 8da:	8a 81       	ldd	r24, Y+2	; 0x02
 8dc:	9b 81       	ldd	r25, Y+3	; 0x03
 8de:	93 83       	std	Z+3, r25	; 0x03
 8e0:	82 83       	std	Z+2, r24	; 0x02
 8e2:	21 15       	cp	r18, r1
 8e4:	31 05       	cpc	r19, r1
 8e6:	29 f4       	brne	.+10     	; 0x8f2 <free+0x92>
 8e8:	f0 93 17 02 	sts	0x0217, r31	; 0x800217 <__flp+0x1>
 8ec:	e0 93 16 02 	sts	0x0216, r30	; 0x800216 <__flp>
 8f0:	3d c0       	rjmp	.+122    	; 0x96c <free+0x10c>
 8f2:	e9 01       	movw	r28, r18
 8f4:	fb 83       	std	Y+3, r31	; 0x03
 8f6:	ea 83       	std	Y+2, r30	; 0x02
 8f8:	49 91       	ld	r20, Y+
 8fa:	59 91       	ld	r21, Y+
 8fc:	c4 0f       	add	r28, r20
 8fe:	d5 1f       	adc	r29, r21
 900:	ec 17       	cp	r30, r28
 902:	fd 07       	cpc	r31, r29
 904:	61 f4       	brne	.+24     	; 0x91e <free+0xbe>
 906:	80 81       	ld	r24, Z
 908:	91 81       	ldd	r25, Z+1	; 0x01
 90a:	84 0f       	add	r24, r20
 90c:	95 1f       	adc	r25, r21
 90e:	02 96       	adiw	r24, 0x02	; 2
 910:	e9 01       	movw	r28, r18
 912:	99 83       	std	Y+1, r25	; 0x01
 914:	88 83       	st	Y, r24
 916:	82 81       	ldd	r24, Z+2	; 0x02
 918:	93 81       	ldd	r25, Z+3	; 0x03
 91a:	9b 83       	std	Y+3, r25	; 0x03
 91c:	8a 83       	std	Y+2, r24	; 0x02
 91e:	e0 e0       	ldi	r30, 0x00	; 0
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	12 96       	adiw	r26, 0x02	; 2
 924:	8d 91       	ld	r24, X+
 926:	9c 91       	ld	r25, X
 928:	13 97       	sbiw	r26, 0x03	; 3
 92a:	00 97       	sbiw	r24, 0x00	; 0
 92c:	19 f0       	breq	.+6      	; 0x934 <free+0xd4>
 92e:	fd 01       	movw	r30, r26
 930:	dc 01       	movw	r26, r24
 932:	f7 cf       	rjmp	.-18     	; 0x922 <free+0xc2>
 934:	8d 91       	ld	r24, X+
 936:	9c 91       	ld	r25, X
 938:	11 97       	sbiw	r26, 0x01	; 1
 93a:	9d 01       	movw	r18, r26
 93c:	2e 5f       	subi	r18, 0xFE	; 254
 93e:	3f 4f       	sbci	r19, 0xFF	; 255
 940:	82 0f       	add	r24, r18
 942:	93 1f       	adc	r25, r19
 944:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <__brkval>
 948:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <__brkval+0x1>
 94c:	28 17       	cp	r18, r24
 94e:	39 07       	cpc	r19, r25
 950:	69 f4       	brne	.+26     	; 0x96c <free+0x10c>
 952:	30 97       	sbiw	r30, 0x00	; 0
 954:	29 f4       	brne	.+10     	; 0x960 <free+0x100>
 956:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <__flp+0x1>
 95a:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <__flp>
 95e:	02 c0       	rjmp	.+4      	; 0x964 <free+0x104>
 960:	13 82       	std	Z+3, r1	; 0x03
 962:	12 82       	std	Z+2, r1	; 0x02
 964:	b0 93 15 02 	sts	0x0215, r27	; 0x800215 <__brkval+0x1>
 968:	a0 93 14 02 	sts	0x0214, r26	; 0x800214 <__brkval>
 96c:	df 91       	pop	r29
 96e:	cf 91       	pop	r28
 970:	08 95       	ret

00000972 <_exit>:
 972:	f8 94       	cli

00000974 <__stop_program>:
 974:	ff cf       	rjmp	.-2      	; 0x974 <__stop_program>
